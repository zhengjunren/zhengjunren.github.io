(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{399:function(v,_,a){"use strict";a.r(_);var t=a(5),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h2",{attrs:{id:"软件产品的特性是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件产品的特性是什么"}},[v._v("#")]),v._v(" 软件产品的特性是什么")]),v._v(" "),a("p",[v._v("软件是一种逻辑产品，具有无形性；软件产品的生产主要是研制；软件不存在磨损和老化问题，但存在退化问题。")]),v._v(" "),a("p",[v._v("软件产品的生产主要是脑力劳动；软件产品的成本非常昂贵，其开发方式目前尚未完全摆脱手工生产方式")]),v._v(" "),a("h2",{attrs:{id:"软件发展有几个阶段-各有何特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件发展有几个阶段-各有何特征"}},[v._v("#")]),v._v(" 软件发展有几个阶段？各有何特征？")]),v._v(" "),a("ol",[a("li",[v._v("程序设计阶段\n"),a("ul",[a("li",[v._v("硬件特征：价格贵、存储容量小、运行可靠性差")]),v._v(" "),a("li",[v._v("软件特征：只有程序、程序设计概念，不重视程序设计方法。")])])]),v._v(" "),a("li",[v._v("程序系统测试\n"),a("ul",[a("li",[v._v("硬件特征：速度、容量及工作可靠性有明显提高，价格降低，销售量有爆炸性增长")]),v._v(" "),a("li",[v._v("软件特征：程序员数量猛增，开发人员素质低")])])]),v._v(" "),a("li",[v._v("软件工程阶段\n"),a("ul",[a("li",[v._v("硬件特征：向超高速、大容量、微型化以及网络化方向发展")]),v._v(" "),a("li",[v._v("软件特征：开发技术有很大进步，但未获得突破性进展，软件价格不断上升，未完全摆脱软件危机。")])])])]),v._v(" "),a("h2",{attrs:{id:"软件危机是什么-产生的原因是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件危机是什么-产生的原因是什么"}},[v._v("#")]),v._v(" 软件危机是什么？产生的原因是什么？")]),v._v(" "),a("p",[v._v("软件危机的出现是由于软件的规模越来越大，复杂度不断增加，软件需求量增大。而软件开发过程是一种高密集度的脑力劳动，软件开发的模式及技术不能适应软件发展的需要。致使大量质量低劣的软件涌向时长，有的花费大量人力财力，而在开发过程中就夭折。软件危机主要表现在两个方面：")]),v._v(" "),a("ol",[a("li",[v._v("软件产品质量低，甚至在开发过程中就夭折")]),v._v(" "),a("li",[v._v("软件生产率低，不能满足需要")])]),v._v(" "),a("h2",{attrs:{id:"什么是软件生存周期模型-有哪些主要模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件生存周期模型-有哪些主要模型"}},[v._v("#")]),v._v(" 什么是软件生存周期模型？有哪些主要模型")]),v._v(" "),a("p",[v._v("软件生命周期也称为软件过程模型，是从软件需求定义直至运行维护为止，跨越整个生命周期的系统开发、运行和维护所实施的全部过程、活动和任务的结构框架。瀑布模型、增量模型、螺旋模型、喷泉模型、快速原型模型")]),v._v(" "),a("h2",{attrs:{id:"可行性研究包括哪几方面的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可行性研究包括哪几方面的内容"}},[v._v("#")]),v._v(" 可行性研究包括哪几方面的内容")]),v._v(" "),a("ol",[a("li",[v._v("经济可行性：是否有经济效益，多长时间可以收回成本")]),v._v(" "),a("li",[v._v("技术可行性：现有技术能否实现本系统，现有技术人员能否胜任，开发系统的资源能否满足")]),v._v(" "),a("li",[v._v("运行可行性：系统操作在用户内部行得通吗？")]),v._v(" "),a("li",[v._v("法律可行性：新系统开发是否会侵犯他人、集体或国家利益，是否违反国家法律")])]),v._v(" "),a("h2",{attrs:{id:"结构化的需求分析描述工具有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构化的需求分析描述工具有哪些"}},[v._v("#")]),v._v(" 结构化的需求分析描述工具有哪些？")]),v._v(" "),a("p",[v._v("数据流图、数据字典、判定表、判定树、控制流图、状态转换图、实体-关系图")]),v._v(" "),a("h2",{attrs:{id:"uml-统一建模语言有哪几种图形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-统一建模语言有哪几种图形"}},[v._v("#")]),v._v(" UML 统一建模语言有哪几种图形")]),v._v(" "),a("p",[v._v("用例图、类图、对象图、构架图、部署图、状态图、活动图、顺序图、协作图，")]),v._v(" "),a("h2",{attrs:{id:"面向对象分析类和对象的静态关系有哪几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象分析类和对象的静态关系有哪几种"}},[v._v("#")]),v._v(" 面向对象分析类和对象的静态关系有哪几种？")]),v._v(" "),a("p",[v._v("关联、聚集、泛化、依赖")]),v._v(" "),a("h2",{attrs:{id:"什么是模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块化"}},[v._v("#")]),v._v(" 什么是模块化")]),v._v(" "),a("p",[v._v("模块化是按照规定的原则讲一个大型软件划分为一个个较小的、相对独立又相关的模块")]),v._v(" "),a("p",[v._v("模块化的准则：")]),v._v(" "),a("ol",[a("li",[v._v("改进软件结构，提高模块独立性")]),v._v(" "),a("li",[v._v("模块大小要适中")]),v._v(" "),a("li",[v._v("软件结构图的深度、宽度、扇入扇出要适当")]),v._v(" "),a("li",[v._v("尽量降低模块接口的复杂程度")]),v._v(" "),a("li",[v._v("设计单入口、单出口的模块")]),v._v(" "),a("li",[v._v("模块的作用域应在控制域之内")])]),v._v(" "),a("h2",{attrs:{id:"什么是需求分析-需求分析阶段的基本任务是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是需求分析-需求分析阶段的基本任务是什么"}},[v._v("#")]),v._v(" 什么是需求分析？需求分析阶段的基本任务是什么？")]),v._v(" "),a("p",[v._v("需求分析是当前软件工程中的关键问题，需求分析阶段的任务是：在可行性分析的基础上，进一步了解、确定用户需求。准确地回答“系统必须做什么？”的问题。获取需求规格说明书。还涉及到软件系统的目标、软件系统提供的服务、软件系统的约束和软件系统运行的环境。它还设计这些因素和系统的精确规格说明以及系统进化之间的关系。")]),v._v(" "),a("h2",{attrs:{id:"内聚的类别有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内聚的类别有哪些"}},[v._v("#")]),v._v(" 内聚的类别有哪些")]),v._v(" "),a("ol",[a("li",[v._v("巧合内聚，又称为偶然内聚。当模块内各部分之间没有联系，或者即使有联系，这种联系也很松散，则称为巧合内聚。")]),v._v(" "),a("li",[v._v("逻辑内聚，这种模块把集中相关的功能组合在一起，每次被调用时，由传送给模块的判定参数来确定该模块应执行哪一种功能。")]),v._v(" "),a("li",[v._v("时间内聚，又称为经典内聚。这种模块大多为多功能模块，但模块的各个功能的执行与时间有关，通常要去所有功能必须在同一时间段内执行。")]),v._v(" "),a("li",[v._v("过程内聚，如果一个模块内的处理是相关的，而且必须以特定次序执行，则称为过程内聚")]),v._v(" "),a("li",[v._v("通信内聚，若果一个模块内各部分都使用了相同的输入数据，或产生了相同的输出数据，则称之为通信内聚模块。")]),v._v(" "),a("li",[v._v("信息内聚，这种模块完后多个功能，各个功能都在同一数据结构上操作，每一项功能有一个唯一的入口点。")]),v._v(" "),a("li",[v._v("功能内聚，一个模块中各个部分都是完成某一具体功能必不可少的组成部分。")])]),v._v(" "),a("h2",{attrs:{id:"软件测试的基本任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试的基本任务"}},[v._v("#")]),v._v(" 软件测试的基本任务")]),v._v(" "),a("p",[v._v("软件是是按照特定的规则，发现软件错误的过程；好的测试方案是尽可能发现迄今尚未发现的测试；成功的测试方案是发现了迄今尚未发现的错误。")]),v._v(" "),a("h2",{attrs:{id:"什么是黑盒测试-主要技术有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是黑盒测试-主要技术有哪些"}},[v._v("#")]),v._v(" 什么是黑盒测试？主要技术有哪些？")]),v._v(" "),a("p",[v._v("黑盒测试也称为功能测试，它着眼于程序的外部特征，而不考虑程序的内部结构，测试者把被测程序看成一个黑盒，不用关心程序的内部结构。黑盒测试是在程序接口处进行测试，它只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接受输入数据产生正确的输出信息，并且保持外部信息的完整性。")]),v._v(" "),a("p",[v._v("黑盒测试采用的技术主要有：等价类划分、边界值分析法、错误推测法和因果图等。")]),v._v(" "),a("h2",{attrs:{id:"什么是白盒测试-主要技术有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是白盒测试-主要技术有哪些"}},[v._v("#")]),v._v(" 什么是白盒测试？主要技术有哪些？")]),v._v(" "),a("p",[v._v("白盒是是测试者了解被测程序的内部结构和处理过程，对程序的所有逻辑进行测试，在不同点检查程序状态，确定实际状态与预期状态是否一致。")]),v._v(" "),a("p",[v._v("主要数有：路径测试技术和事务处理流程基础，对包含大量逻辑判断或条件组合的程序采用基于逻辑的测试技术。")]),v._v(" "),a("h2",{attrs:{id:"软件维护分为哪几类-请简介。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件维护分为哪几类-请简介。"}},[v._v("#")]),v._v(" 软件维护分为哪几类，请简介。")]),v._v(" "),a("p",[v._v("完善性维护：满足用户在使用过程中提出增加新的功能或修改已有功能，以满足用户日益增长的需要而进行的工作")]),v._v(" "),a("p",[v._v("适应性维护：新的硬件设别不断退出，操作系统和编译系统也不断升级，是软件适应新的运行环境而进行的工作")]),v._v(" "),a("p",[v._v("改正性维护：纠正开发期间未发现的遗留错误，即在程序使用期间发现程序错误进行诊断和改正的过程")]),v._v(" "),a("p",[v._v("预防性维护：为了改善未来的可维护性或可靠性而修改软件的过程。")]),v._v(" "),a("h2",{attrs:{id:"决定软件可维护性的因素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#决定软件可维护性的因素"}},[v._v("#")]),v._v(" 决定软件可维护性的因素")]),v._v(" "),a("ol",[a("li",[v._v("软件的可理解性、可测试性、可修改性")]),v._v(" "),a("li",[v._v("文档描述符合要求、用户文档简介明确、系统文档完整并且标准")])]),v._v(" "),a("h2",{attrs:{id:"软件测试的基本任务是什么-纠错与测试有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试的基本任务是什么-纠错与测试有什么区别"}},[v._v("#")]),v._v(" 软件测试的基本任务是什么？纠错与测试有什么区别？")]),v._v(" "),a("p",[v._v("软件测试的基本任务是通过在计算机上执行程序，暴露程序中潜在的错误。测试和纠错目的和任务都不同，测试是为了发现程序的错误，纠错是为了定位和纠正错误，从而消除软件故障，保证程序的可靠运行。")]),v._v(" "),a("h2",{attrs:{id:"软件测试包括哪些步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试包括哪些步骤"}},[v._v("#")]),v._v(" 软件测试包括哪些步骤？")]),v._v(" "),a("ol",[a("li",[v._v("单元测试，目的是代码达到模块说明书中的要求")]),v._v(" "),a("li",[v._v("集成测试，目的是将经过单元测试的模块逐步组装成具有良好一致性的完整的程序")]),v._v(" "),a("li",[v._v("确认测试，目的是确认程序系统是否满足软件需求规格说明书的要求")]),v._v(" "),a("li",[v._v("系统测试，目的是检查能否与系统的其余部分协调运行。")])]),v._v(" "),a("h2",{attrs:{id:"什么是集成测试-渐增式和非渐增式有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是集成测试-渐增式和非渐增式有何区别"}},[v._v("#")]),v._v(" 什么是集成测试？渐增式和非渐增式有何区别？")]),v._v(" "),a("p",[v._v("将某块组合起来称为一个完整的系统对其进行测试叫做集成测试。不论是子系统测试还是系统测试，都兼有检测和组装两重含义，通常称为集成测试。")]),v._v(" "),a("p",[v._v("非渐增式是将模块先进行单元测试然后在组装在一起进行测试。渐增式是逐个将未测试的模块组装到已经测试过的模块上进行集成测试，每次加入一个就测试一次。非渐增式需要桩模块和驱动模块、非渐增式开始可以并行测试、渐增式可以及时发现接口错误，非渐增式很难发现接口错误、渐增式开始不能并行测试、渐增式测试比较彻底。")]),v._v(" "),a("h2",{attrs:{id:"什么是软件复用-请简述软件复用和软件共享、软件移植的差别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件复用-请简述软件复用和软件共享、软件移植的差别。"}},[v._v("#")]),v._v(" 什么是软件复用？请简述软件复用和软件共享、软件移植的差别。")]),v._v(" "),a("p",[v._v("软件复用是指在构造新的软件系统的过程中，对已存在的软件人工制品的使用技术。如果是在一个系统中多次使用一个相同的软件成分，这叫软件共享。对一个软件进行修改，使它能运行于新的软、硬件平台，这成为软件移植。")]),v._v(" "),a("h2",{attrs:{id:"什么是软件再工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件再工程"}},[v._v("#")]),v._v(" 什么是软件再工程？")]),v._v(" "),a("p",[v._v("软件再工程是运用逆向功能、重构等技术，在充分理解软件的基础上，进行分解、综合、并重新构建软件，用以提高软件的可理解性、可维护性、可复用性或演化性。主要活动：信息库分析、文档重构、逆向工程、代码重构、数据重构、正向工程。")]),v._v(" "),a("h2",{attrs:{id:"面向对象和面向过程软件工程有哪些区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程软件工程有哪些区别"}},[v._v("#")]),v._v(" 面向对象和面向过程软件工程有哪些区别")]),v._v(" "),a("ol",[a("li",[v._v("面向过程就是分析出解决所需要的步骤，然后用函数在这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事务在整个解决问题的步骤中的行为")]),v._v(" "),a("li",[v._v("面向过程是把一件事一项工程分解为一个个小的功能，用一个个函数来实现；面向对象是把事务看成是一个个小的对象组成的，或者说一个个小部分组成的。这些对象之间的相互关系，构成了整个项目，在面向对象的思想中，万物皆对象。而类就是对象的抽象")])]),v._v(" "),a("h2",{attrs:{id:"简述面向对象分析设计的三个模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述面向对象分析设计的三个模型"}},[v._v("#")]),v._v(" 简述面向对象分析设计的三个模型")]),v._v(" "),a("p",[v._v("对象模型、动态模型、功能模型")]),v._v(" "),a("ol",[a("li",[v._v("对象模型描述系统的静态结构，包括类和对象，它们的属性和操作，以及他们之间的关系。构造对象模型的目的在于找出与应用程序的密切相关的概念。对象模型用包含对象以对象的关系图表示。")]),v._v(" "),a("li",[v._v("动态模型着重于系统的控制结构，考察在任何时候对象及其关系的改变，描述这些设计时序和改变的状态。动态模型包括状态图和时间跟踪图。状态图是一个状态和事件的网络，侧重于描述每一类对象的行为。")]),v._v(" "),a("li",[v._v("功能模型着重于系统内部数据的传送和处理。功能模型表名，通过计算，从输出数据能得到怎样的输出数据，但不考虑参加计算的数据按什么时序执行。")])]),v._v(" "),a("h2",{attrs:{id:"原型模型和增量模型区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模型和增量模型区别"}},[v._v("#")]),v._v(" 原型模型和增量模型区别")]),v._v(" "),a("p",[v._v("增量模型的特点是引进了增量包的概念，无须等到所有需求都出来，只要某个需求的增量包出来即可进行开发。虽然某个增量包可能还需要进一步适应客户的需求并且更改，但只要这个增量包足够小，其影响对整个项目来说是可以承受的")]),v._v(" "),a("p",[v._v("增量模型（incremental model）与原型实现模型和其他演化方法一样，本质上是迭代的，但与原型实现不一样的是其强调每一个增量均发布一个可操作产品。早期的增量是最终产品的“可拆卸”版本，但提供了为用户服务的功能，并且为用户提供了评估的平台。")]),v._v(" "),a("p",[v._v("快速原型模型又称原型模型，它是增量模型的另一种形式；它是在开发真实系统之前，构造一个原型，在该原型的基础上，逐渐完成整个系统的开发工作。快速原型模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，用户或客户对原型进行评价，进一步细化待开发软件的需求。通过逐步调整原型使其满足客户的要求，开发人员可以确定客户的真正需求是什么；第二步则在第一步的基础上开发客户满意的软件产品。")]),v._v(" "),a("h2",{attrs:{id:"请简述螺旋开发模型的基本开发过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述螺旋开发模型的基本开发过程"}},[v._v("#")]),v._v(" 请简述螺旋开发模型的基本开发过程")]),v._v(" "),a("ol",[a("li",[v._v("需求定义。利用需求分析技术理解应用领域，获取初步的用户需求，指定项目开发计划。")]),v._v(" "),a("li",[v._v("风险分析。根据初始需求或改进意见评审可选用的方案，给出消除或减少风险的途径。")]),v._v(" "),a("li",[v._v("工程实现。利用快速原型构造方法针对已知的用户需求生成快速原型")]),v._v(" "),a("li",[v._v("评审。将原型提交用户使用并征询用户改进意见")])]),v._v(" "),a("p",[v._v("上述过程不断迭代，直至给出用户满意的目标软件产品")]),v._v(" "),a("h2",{attrs:{id:"模块的扇入、扇出、深度、宽度是什么意思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块的扇入、扇出、深度、宽度是什么意思"}},[v._v("#")]),v._v(" 模块的扇入、扇出、深度、宽度是什么意思？")]),v._v(" "),a("p",[v._v("深度表示软件结构中控制的层数-粗略的标志一个系统的大小和复杂程度")]),v._v(" "),a("p",[v._v("宽度是软件结构同一层次上的模块总数的最大值-宽度越大系统越复杂")]),v._v(" "),a("p",[v._v("模块的扇出指一个模块拥有的直属下级模块的个数，一般扇出数控制在 7 以内，平均为 3 模块的扇出或 4")]),v._v(" "),a("p",[v._v("模块的扇入是指一个模块的直接上级模块的个数")]),v._v(" "),a("h2",{attrs:{id:"请简要描述-α-测试和-β-测试的内容-并比较异同。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要描述-α-测试和-β-测试的内容-并比较异同。"}},[v._v("#")]),v._v(" 请简要描述 α 测试和 β 测试的内容，并比较异同。")]),v._v(" "),a("ul",[a("li",[v._v("α 测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。软件在一个自然设置状态下使用，开发者坐在用户旁边，随时记下错误情况和使用中的问题，这是在受控环境下进行的测试。")]),v._v(" "),a("li",[v._v("β 测试是由软件的多个用户在一个或多个实际使用环境下进行的测试。这些用户是公司签订了支持产品预发行合同的外部用户，他们使用该产品，并愿意把所有发现的错误信息反馈给开发者。")]),v._v(" "),a("li",[v._v("α 测试与 β 测试都是集成测试之后所进行的测试，都属于确认测试，所不同的是，α 测试是在开发环境中所作的测试，主要由开发方人员进行，而 β 测试则是由用户实际工作环境中所做的测试，不受开发人员的干扰。")])]),v._v(" "),a("h2",{attrs:{id:"请简述-mvc-体系结构框架的含义和工作方式。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-mvc-体系结构框架的含义和工作方式。"}},[v._v("#")]),v._v(" 请简述 MVC 体系结构框架的含义和工作方式。")]),v._v(" "),a("ul",[a("li",[v._v("MVC 强调将用户输入、数据模型和数据表示的分开设计，一个交互应用系统由模型（Model）、视图（view）和控制器（controller）3 个部件组成，分别对应于内部数据、数据表示和输入输出控制部分。")]),v._v(" "),a("li",[v._v("MVC 的处理过程为，首先控制器接受用户的请求，并决定应该调用哪一个模型来进行处理；然后模型用业务逻辑来处理用户的请求并返回数据；最后控制器用相应的视图格式化模型返回数据，并通过表示层呈现给用户。其中，模型是核心数据和功能，视图只关心显示数据，控制器只关心用户输入，这种结构由于将数据和业务规则从表示层分开，因此可以最大化地重用代码。")])]),v._v(" "),a("h2",{attrs:{id:"请描述并比较顺序图和协作图的功能和关系。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请描述并比较顺序图和协作图的功能和关系。"}},[v._v("#")]),v._v(" 请描述并比较顺序图和协作图的功能和关系。")]),v._v(" "),a("ul",[a("li",[v._v("顺序图描述对象之间的动态交互关系，着重表现对象间消息传递的时间顺序")]),v._v(" "),a("li",[v._v("协作图是顺序图的一种变换形式，用于描述互相协作的对象间的交互关系和链接关系")]),v._v(" "),a("li",[v._v("顺序图和协作图都属于交互图，都描述相互协作的对象间的交互关系和，但它们侧重点不同：顺序图着重表现交互的时间顺序，协作图则着重表现交互对象的静态链接关系")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍结构化分析模型的内容。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍结构化分析模型的内容。"}},[v._v("#")]),v._v(" 请简要介绍结构化分析模型的内容。")]),v._v(" "),a("ul",[a("li",[v._v("该模型的核心是数据字典，包括在目标系统中使用和生成所有数据的对象。围绕这个核心有 3 种图：")]),v._v(" "),a("li",[v._v("数据流图描述数据在系统中如何被传送或者变换，以及描述如何对数据流进行变换的功能，用于功能建模")]),v._v(" "),a("li",[v._v("E-R 图描述对象及数据之间的关系，用于数据建模")]),v._v(" "),a("li",[v._v("状态图描述系统对外部事件如何响应、如何动作，用于行为建模")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍白盒介绍测试中逻辑覆盖主要分成哪几种测试覆盖-它们的含义分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍白盒介绍测试中逻辑覆盖主要分成哪几种测试覆盖-它们的含义分别是什么"}},[v._v("#")]),v._v(" 请简要介绍白盒介绍测试中逻辑覆盖主要分成哪几种测试覆盖，它们的含义分别是什么？")]),v._v(" "),a("ul",[a("li",[v._v("语句覆盖：设计若干测试用例、运行被测程序，使得每一个可执行的语句至少执行一次")]),v._v(" "),a("li",[v._v("判定覆盖：使得程序中每个判断的取真分支和假分支至少经历一次，又称为分支覆盖")]),v._v(" "),a("li",[v._v("条件覆盖：使得程序中每个判断的每个条件的可能取值至少执行一次")]),v._v(" "),a("li",[v._v("判定-条件覆盖：使得判断中每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次")]),v._v(" "),a("li",[v._v("条件组合覆盖：使得每个判断的所有可能的条件取值组合至少执行一次")]),v._v(" "),a("li",[v._v("路径覆盖：设计足够的测试用例，覆盖程序中所有可能的路径")])]),v._v(" "),a("h2",{attrs:{id:"请简要描述瀑布模型的含义-以及优点和缺点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要描述瀑布模型的含义-以及优点和缺点。"}},[v._v("#")]),v._v(" 请简要描述瀑布模型的含义，以及优点和缺点。")]),v._v(" "),a("ul",[a("li",[v._v("瀑布模型是将软件生存周期的各项活动规定为按照固定顺序而连接的若干阶段工作，形如瀑布流水，最终得到软件产品。开发过程是通过一系列阶段顺序展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈。")]),v._v(" "),a("li",[v._v("优点：\n"),a("ul",[a("li",[v._v("可强迫开发人员采用规范化的方法")]),v._v(" "),a("li",[v._v("严格规定了每个阶段必须提交的文档")]),v._v(" "),a("li",[v._v("要求每个阶段交出的所有产品都必须是经过验证的")])])]),v._v(" "),a("li",[v._v("缺点：\n"),a("ul",[a("li",[v._v("由于瀑布模型几乎完全依赖于书面的规格说明，很可能导致最终开发的产品不能真正满足用户的需要，如果需求规格说明与用户需求之间有差异，就会发生这种情况")]),v._v(" "),a("li",[v._v("瀑布模型只只用于项目开始时需求已确定的情况")])])])]),v._v(" "),a("h2",{attrs:{id:"请简述软件风险管理活动中的主要内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述软件风险管理活动中的主要内容"}},[v._v("#")]),v._v(" 请简述软件风险管理活动中的主要内容")]),v._v(" "),a("ul",[a("li",[v._v("软件风险管理活动围绕着"),a("strong",[v._v("风险评估和风险控制")]),v._v("开展。")]),v._v(" "),a("li",[a("strong",[v._v("风险评估通常包括风险识别、风险分析和风险管理 3 个方面的内容")]),v._v("。风险识别是风险评估的第一步，检查单是识别风险的有力工具；风险分析的任务是分析每个风险可能造成的影响，给出风险大小的量值；其次，我们必须对风险加以区别，以便把管理者的目光集中到最高风险的事件上。")]),v._v(" "),a("li",[a("strong",[v._v("风险控制包括风险管理策划、风险化解、和风险监控")]),v._v("。风险管理策划是要针对每个已经过识别和分析认为应该受控的风险指定风险管理计划；风险化解是要实际消除风险或减轻风险。其次我们不应把项目看成是静止不动的，必须定期对风险进行重新评估。")])]),v._v(" "),a("h2",{attrs:{id:"简述-uml-通信图中的组成元素和作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述-uml-通信图中的组成元素和作用"}},[v._v("#")]),v._v(" 简述 UML 通信图中的组成元素和作用")]),v._v(" "),a("ul",[a("li",[v._v("UML 通信图中的组成元素为：对象、链接、消息")]),v._v(" "),a("li",[v._v("对象：表示一个类的实例")]),v._v(" "),a("li",[v._v("链接：用来在通信图中关联对象，目的是让消息在不同系统对象之间传递")]),v._v(" "),a("li",[v._v("消息：是通信图中对象与对象之间通信的方式，可分为简单消息、异步消息、同步消息和反身消息")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍软件生存期模型的内涵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍软件生存期模型的内涵"}},[v._v("#")]),v._v(" 请简要介绍软件生存期模型的内涵")]),v._v(" "),a("ul",[a("li",[v._v("软件生存模型也称为软件过程模型，是从软件项目需求定义直到软件运行维护为止，跨越整个生命周期的系统开发、运行和维护所实施的全部过程、活动和任务的结构框架。到目前为止，已经提出了多种软件生存期模型，典型的包括瀑布模型、原型模型、增量模型、螺旋模型、统一过程、敏捷过程")])]),v._v(" "),a("h2",{attrs:{id:"请简要描述统一过程模型的主要内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要描述统一过程模型的主要内容"}},[v._v("#")]),v._v(" 请简要描述统一过程模型的主要内容")]),v._v(" "),a("ul",[a("li",[v._v("统一过程是一种现代的软件开发过程模型，它把复杂系统构造为一组相互联系的功能块，小的功能块相连形成更大的功能块以构造出完整的系统。尽管对于只触及到系统的部分的任何成员来说，整个系统是不可理喻的，但是当系统被分为更小的组件时，人们可以理解每个组件提供的服务以及这些组件时如何协调工作的。或者可以说，系统被划分为具有较大功能的子系统，每个子系统又由具有更小的功能块所实现。统一过程模型是一种以用例和风险驱动，以体系结构为核心，迭代及增量为特征的软件过程框架，一般由 UML 方法和工具支持。")]),v._v(" "),a("li",[v._v("统一过程有 6 个核心过程工作流，即业务建模、需求、分析与设计、实现、测试和部署")]),v._v(" "),a("li",[v._v("统一过程有 4 个阶段，分别是初始阶段、细化阶段、构造阶段和移交阶段")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍黑盒测试的主要内容和主要方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍黑盒测试的主要内容和主要方法"}},[v._v("#")]),v._v(" 请简要介绍黑盒测试的主要内容和主要方法")]),v._v(" "),a("ul",[a("li",[v._v("黑盒测试是把测试对象看做一个黑盒子，测试人员完全不考虑程序内部的逻辑结构和内部特性，只依据程序的需求规格说明书，检查程序的功能是否符合它的功能说明。")]),v._v(" "),a("li",[v._v("主要方法：等价类划分和边界值分析。等价类划分设计测试用例时要经过划分等价类和选取测试用例两步。等价类是指某个输入域的子集合，在该子集合中，各个输入数据对于揭露程序中的错误都是等价的；边界值分析方法是对等价类划分方法的补充。边界是指对相对于输入等价类和输出等价类而言，稍高于边界值及稍低于边界值的一些特定情况。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍软件能力成熟度模型的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍软件能力成熟度模型的内容"}},[v._v("#")]),v._v(" 请简要介绍软件能力成熟度模型的内容")]),v._v(" "),a("ul",[a("li",[v._v("软件能力成熟度模型是一个参考模型，涵盖了开发产品与服务的活动，它所包含的实践覆盖了项目管理，过程管理、系统工程、软件工程以及其他用于开发与维护的支持过程。CMMI 对于软件检查过程的改进提供了两种不同的路径，即连续式表示和分级式表示。其中分级式表示的成熟度等级共有 5 个，连续式表示的能力等级共有 4 个。过程域是 CMMI 为实施过程改进的组织提供的若干个特别重要同时也是十分关键的软件过程。CMMI 把每个过程域中的内容都分割成模型部件，即必须部件，期望部件，资料性部件。")])]),v._v(" "),a("h2",{attrs:{id:"请简述-cmm-帮助软件企业进行过程改进的基本方法。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-cmm-帮助软件企业进行过程改进的基本方法。"}},[v._v("#")]),v._v(" 请简述 CMM 帮助软件企业进行过程改进的基本方法。")]),v._v(" "),a("ul",[a("li",[v._v("CMM 是对于软件组织在定义、实施、度量、控制和改善其软件过程的实践中各个发展阶段的描述。对软件过程的改进，是在完后才能一个又一个小的改进步骤基础上不断进行的渐进过程，而不是一蹴而就的彻底革命。CMM 把软件过程从无序到有序的进化过程分为 5 个阶段，并把这些阶级排序，形成 5 个逐层提高的等级。")])]),v._v(" "),a("h2",{attrs:{id:"请简述增量开发模型与迭代开发的异同点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述增量开发模型与迭代开发的异同点。"}},[v._v("#")]),v._v(" 请简述增量开发模型与迭代开发的异同点。")]),v._v(" "),a("ul",[a("li",[v._v("增量开发模型与迭代开发模型都属于软件生命周期模型。增量开发模型是从功能量上来划分的，每阶段完成一定的功能，适用于需求比较明确，架构比较稳定的软件开发；")]),v._v(" "),a("li",[v._v("迭代开发模型是从深度或细化的程度来划分的，每阶段功能得到完善、增强、适用于需求不甚明确，难度比较大的软件开发。")])]),v._v(" "),a("h2",{attrs:{id:"为什么应用软件开发和软件工程方法解决大规模、复杂问题时-软件系统的质量和效率无法得到保证-应该如何解决"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么应用软件开发和软件工程方法解决大规模、复杂问题时-软件系统的质量和效率无法得到保证-应该如何解决"}},[v._v("#")]),v._v(" 为什么应用软件开发和软件工程方法解决大规模、复杂问题时，软件系统的质量和效率无法得到保证？应该如何解决？")]),v._v(" "),a("ul",[a("li",[v._v("原因：大规模复杂软件系统的性能与质量对软件工程技术提出了新的要求。在非功能性需求方面：①系统性能要求，可用性要求②系统可适用性和可移植性要求③系统可靠性和保密性要求④系统可重用性要去")]),v._v(" "),a("li",[v._v("解决方法：在系统的局部算法结构之前，着重进行系统的整体结构设计。")])]),v._v(" "),a("h2",{attrs:{id:"请简述面向对象设计与结构化设计有何异同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述面向对象设计与结构化设计有何异同"}},[v._v("#")]),v._v(" 请简述面向对象设计与结构化设计有何异同？")]),v._v(" "),a("ul",[a("li",[v._v("面向对象设计与结构化设计都属于软件工程方法。结构化设计采用结构化技术来完成软件开发的各项任务。这种方法学把软件生命周期全过程依次划分为若干个阶段，然后顺序地逐步完后才能每个阶段的任务。每一个阶段的开始和结束都有严格的标准，对于任何两个相邻的阶段而言，前一个阶段的结束标准就是后一个阶段的开始标准。其主要缺点是在适应变化方面不够灵活。另外结构化设计要么面向行为，要么面向数据，缺乏使两者有机结合的机制")]),v._v(" "),a("li",[v._v("面向对象设计把数据和行为看成同等重要，它是将数据和对数据的操作紧密地结合起来的方法，这是面向对象设计方法与结构化设计方法的重要区别。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖-它们的含义分别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖-它们的含义分别是什么"}},[v._v("#")]),v._v(" 请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖，它们的含义分别是什么？")]),v._v(" "),a("ul",[a("li",[v._v("语句覆盖：设计足够的用例，使每个可执行的语句至少执行一次")]),v._v(" "),a("li",[v._v("判定覆盖：设计足够的用例，在每个可执行的语句至少执行一次的情况下，每个真假分支至少执行一次")]),v._v(" "),a("li",[v._v("条件覆盖：设计足够的用例，在每个可执行的语句至少执行一次的情况下，使得程序中每个判断的每个条件的可能取值至少执行一次")]),v._v(" "),a("li",[v._v("判定-条件覆盖：设计足够的用例，使判断中每个条件的所有可能取值至少执行一次，同时每个判断本身所有可能结果也至少执行一次")]),v._v(" "),a("li",[v._v("条件-组合判断：使得每个判定中条件的各种可能组合都至少出现一次")]),v._v(" "),a("li",[v._v("路径覆盖：设计足够测试用例，覆盖程序中所有可能的路径")])]),v._v(" "),a("h2",{attrs:{id:"请简述-uml-时序图的含义、组成元素和工作机制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-uml-时序图的含义、组成元素和工作机制。"}},[v._v("#")]),v._v(" 请简述 UML 时序图的含义、组成元素和工作机制。")]),v._v(" "),a("ul",[a("li",[v._v("时序图描述对象之间的动态交互关系，着重表现对象间消息传递的时间顺序")]),v._v(" "),a("li",[v._v("组成元素：参与者、对象、对象的生命线、消息")]),v._v(" "),a("li",[v._v("工作机制：在时序图中，纵轴从上到下表示时间顺序；横轴从左到右安排有关联的各个相关对象，关系密切的对象应该安排在相邻位置。每个对象下面有条称为生命线的竖直虚线，绘制在生命线中的细长矩形符合表示该对象的生存活跃期，虚线为该对象的休眠期。对象之间的消息传递由实箭线表示，箭头上标记消息的名称，箭头从发送方向接收方。")])]),v._v(" "),a("h2",{attrs:{id:"请简述螺旋开发模型内涵-及其与快速原型开发模型的异同点。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述螺旋开发模型内涵-及其与快速原型开发模型的异同点。"}},[v._v("#")]),v._v(" 请简述螺旋开发模型内涵，及其与快速原型开发模型的异同点。")]),v._v(" "),a("ul",[a("li",[v._v("螺旋开发模型的内涵：使用原型及其他方法来尽量降低风险。把它看作在每个阶段之前都增加了风险分析过程的快速原型模型。")]),v._v(" "),a("li",[v._v("螺旋开发模型与快速原型模型的重要区别在于明确地考虑了开发中的风险。快速原型开发模型具有需求分析入手快速、表达直观、容易交流的特点，重点解决瀑布模型的需求分析入手难的问题；")]),v._v(" "),a("li",[v._v("螺旋开发模型结合了快速开发原型模型和瀑布模型，融进了循环往复，强化了演进迭代的思想，增加了风险控制环节。")]),v._v(" "),a("li",[v._v("螺旋开发模型与快速原型模型都是针对实现不能完整定义需求的软件开发，采取迭代的开发过程，在一定程度上减少了软件开发的盲目性。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍适配器设计模式的含义、分类及实现机制。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍适配器设计模式的含义、分类及实现机制。"}},[v._v("#")]),v._v(" 请简要介绍适配器设计模式的含义、分类及实现机制。")]),v._v(" "),a("ul",[a("li",[v._v("适配器模式分为对象适配器和类适配器。")]),v._v(" "),a("li",[v._v("将一个类的接口转换称为客户所期望的另一种接口，使得原本不匹配的接口而无法合作的类可以一起工作")]),v._v(" "),a("li",[v._v("新编写一个适配器类，在适配器类中聚合被适配的接口或者继承被适配的类并且编写相应处理的函数，然后再调用者中调用适配器中的处理函数。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖-它们的含义分别是什么-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖-它们的含义分别是什么-2"}},[v._v("#")]),v._v(" 请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖，它们的含义分别是什么？")]),v._v(" "),a("ul",[a("li",[v._v("语句覆盖：设计若干用例，使得每个可执行的语句至少执行一次")]),v._v(" "),a("li",[v._v("判断覆盖：设计若干用例，使得每个判断中的真分支和假分支至少执行一次")]),v._v(" "),a("li",[v._v("条件覆盖：设计足够的用例，使得每个判断中的每个条件至少执行一次")]),v._v(" "),a("li",[v._v("判断-条件覆盖：设计足够测试用例，使得每个判断中每个条件的所有可能至少执行一次，同时每个判断条件本身所有的可能判断结果至少执行一次")]),v._v(" "),a("li",[v._v("条件组合覆盖：设计若干测试用例，使得每个判断的所有可能结果的条件取值组合至少执行一次")]),v._v(" "),a("li",[v._v("路径覆盖，设计足够的测试用例，覆盖程序中所有路径。")])]),v._v(" "),a("h2",{attrs:{id:"简述软件生存周期由哪些主要阶段组成-每一阶段的主要任务是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述软件生存周期由哪些主要阶段组成-每一阶段的主要任务是什么"}},[v._v("#")]),v._v(" 简述软件生存周期由哪些主要阶段组成，每一阶段的主要任务是什么？")]),v._v(" "),a("ul",[a("li",[v._v("概括的说，软件生存期由软件定义、软件开发和运行维护三个时期组成。")]),v._v(" "),a("li",[v._v("问题定义与可行性研究：本阶段要回答的关键问题是：到底要解决什么问题？在成本和时间的限制条件下能否解决问题？是否值得做？")]),v._v(" "),a("li",[a("strong",[v._v("需求分析")]),v._v("：本阶段要回答的关键问题是：目标系统应当做什么？")]),v._v(" "),a("li",[a("strong",[v._v("软件设计")]),v._v("：本阶段要回答的关键问题是：目标系统应当如何做？为此，必须在设计阶段制定设计方案，"),a("strong",[v._v("把已确定的各项需求转化为相应的软件体系结构，结构中每一组成部分都是意义明确的构件，此即为所谓概要设计")]),v._v("。"),a("strong",[v._v("进而具体描述各个构件所要完成的工作为源程序编码打下基础，此即所谓的详细设计。")])]),v._v(" "),a("li",[a("strong",[v._v("程序编码和单元测试")]),v._v("：本阶段要回答的关键问题是：如何正确地实施已做的设计，即如何编写正确的、可维护的程序代码？为此，需要选择合适的编程语言，把软件设计转换成计算机可以接受的程序代码，并对程序结构中的各个模块进行单元测试，然后运行调试手段排除发现的错误。要求编写的程序应是结构良好，清晰易读的，且与设计一致。")]),v._v(" "),a("li",[a("strong",[v._v("集成测试和系统测试")]),v._v("：集成测试的任务是将已测试过的模块按设计规定的顺序组装起乱来，在组装过程中检查模块连接中的问题。系统测试的任务是根据需求规格说明的要求，对必须实现的各项需求逐步进行确认，判断已开发的软件是否符合用户需求，能否交付用户使用，为了更有效地发现系统中的问题，通常这个阶段的工作由开发人员和用户之外的第三者承担。")]),v._v(" "),a("li",[a("strong",[v._v("软件运行和维护")]),v._v("：已交付的软件一旦投入正式使用便进入运行维护阶段，这一阶段可能持续若干年。软件在运行中可能由于多方面的原因需要对它进行修改。通常由四种类型的维护：改正性维护、适应性维护、预防性维护和完善性维护。")])]),v._v(" "),a("h2",{attrs:{id:"简述-coad-yourdon-的面向对象设计模型的内涵。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述-coad-yourdon-的面向对象设计模型的内涵。"}},[v._v("#")]),v._v(" 简述 Coad&Yourdon 的面向对象设计模型的内涵。")]),v._v(" "),a("ul",[a("li",[v._v("Coad & Yourdon 基于 MVC 模型，在逻辑上将系统划分为 4 个部分，分别是问题域部分、人际交互部分、任务管理部分及数据管理部分。每一部分又可分为若干个子系统。在不同的软件系统中，这 4 个部分的重要程度可能相差很大，在设计过程中可以将规模过大的子系统进一步划分为更小的子系统，规模过小的则可以合并到其他子系统中。")]),v._v(" "),a("li",[v._v("Coad & Yourdon 在设计阶段中继续采用了分析阶段中提到的 5 个层次，用于建立系统的四个组成部分。每一个子系统都由主题、类-对象、结构、属性和服务 5 个层次组成。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍并比较-α-测试和-β-测试的内涵和异同。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍并比较-α-测试和-β-测试的内涵和异同。"}},[v._v("#")]),v._v(" 请简要介绍并比较 α 测试和 β 测试的内涵和异同。")]),v._v(" "),a("ul",[a("li",[v._v("α 测试是指，由一个用户在开发环境下进行的测试或公司内部用户在模拟实际操作环境下的测试，软件在在自然设置状态下进行的使用，开发人员坐在用户旁边，随时记下产生的错误和使用情况，称之为受控的测试。")]),v._v(" "),a("li",[v._v("β 测试是指，由多个用户在实际使用环境下进行的测试。这些用户和公司签订了预发行的合同的外部用户，他们使用该产品，并且将软件使用的错误信息反馈给公司。")]),v._v(" "),a("li",[v._v("α  测试与 β 测试都是集成测试之后所进行的测试，都属于确认测试，所不同的是，α 测试是在开发环境中所作的测试，主要由开发方人员进行，而 β 测试则是由用户实际工作环境中所做的测试，不受开发人员的干扰。")])]),v._v(" "),a("h2",{attrs:{id:"请简要介绍结构化分析模型的内容。-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简要介绍结构化分析模型的内容。-2"}},[v._v("#")]),v._v(" 请简要介绍结构化分析模型的内容。")]),v._v(" "),a("ul",[a("li",[v._v("该模型的核心是数据字典，包括在目标系统中使用和生成的所有数据对象。围绕这个核心有 3 种图：数据流图描述数据在系统中如何被传送或变换，以及描述如何对数据进行变换的功能，用于功能建模；实体-关系图描述对象及数据对象之间的关系，用于数据建模；状态图描述系统对外部事务如何响应、如何动作，用于行为建模。")])]),v._v(" "),a("h2",{attrs:{id:"软件生命周期有哪几个阶段和各阶段的任务是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件生命周期有哪几个阶段和各阶段的任务是什么"}},[v._v("#")]),v._v(" 软件生命周期有哪几个阶段和各阶段的任务是什么？")]),v._v(" "),a("ul",[a("li",[v._v("问题定义与可行性研究，本阶段要回答的关键问题是：到底要解决什么问题？在成本和时间的限制条件下能否解决问题？是否值得做？为此，必须确定待开发软件系统的总目标，给出它的功能、性能、约束、接口以及可靠性等方面的要求。")]),v._v(" "),a("li",[v._v("需求分析，本阶段要回答的关键问题是：目标系统应当做什么？为此必须对用户要求进行分析，明确目标系统的功能需求和非功能需求，并通过建立分析模型，从功能、数据、行为等方面描述系统的静态特性和动态特性，对目标系统做进一步的细化，了解系统的各种需求细节。")]),v._v(" "),a("li",[v._v("软件设计，本阶段要回答的关键问题是：目标系统如何做？为此，必须在设计阶段指定设计方案，把已确定的各项需求转换成相应的软件体系结构，结构中每一组成部分都是意义明确的构件，此即所谓概要设计。进而具体描述每个构件所要完成的工作，为源程序编码打下基础，此即所谓详细设计。")]),v._v(" "),a("li",[v._v("程序编码和单元测试，本阶段要解决的问题是：如何正确地实现已做的设计，即如何编写正确的、可维护的程序代码？为此需要选择合适的编程语言，把软件设计转换成计算机可以接受的程序代码，应对程序结构中的各个模块进行单元测试，然后用调试排除发现的错误。")]),v._v(" "),a("li",[v._v("集成测试和系统测试，本阶段的主要任务是做集成测试和系统测试。集成测试的任务是将已测试的模块按设计规定的顺序组装起来，在组装过程中检查模块连接中的问题。系统测试的任务是根据需求规格说明的要求，对必须实现的各项需求逐项进行确认，判定已开发的软件是否符合用户需求，能否交付用户使用。")]),v._v(" "),a("li",[v._v("软件运行和维护，已交付的软件一旦投入正式使用便进入运行阶段，这一阶段可能持续若干年。软件在运行中可能由于多方面的原因需要对它进行修改，通常由四类维护：改正性维护、适应性维护、完善性维护和预防性维护。")])]),v._v(" "),a("h2",{attrs:{id:"耦合衡量不同模块彼此间相互依赖的紧密程度-耦合的类别有哪些-请简要介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#耦合衡量不同模块彼此间相互依赖的紧密程度-耦合的类别有哪些-请简要介绍"}},[v._v("#")]),v._v(" 耦合衡量不同模块彼此间相互依赖的紧密程度，耦合的类别有哪些？请简要介绍")]),v._v(" "),a("ul",[a("li",[v._v("内容耦合。如果发生下列情形，两个模块之间就发生了内容耦合：\n"),a("ul",[a("li",[v._v("一个模块直接访问另一个模块的内部数据")]),v._v(" "),a("li",[v._v("一个模块不通过正常入口转到另一个模块内部")]),v._v(" "),a("li",[v._v("两个模块有一部分程序代码重叠")]),v._v(" "),a("li",[v._v("一个模块有多个入口")])])]),v._v(" "),a("li",[v._v("公共耦合，若一组模块都访问同一个公共数据环境，则他们之间的耦合就称为公共耦合。公共数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等")]),v._v(" "),a("li",[v._v("外部耦合，若一组模块都访问同一全局简单变量而不是同一全局数据结构，而不是通过参数表传递该全局变量的信息")]),v._v(" "),a("li",[v._v("控制耦合，如果一个模块传递给另一个模块的参数中包含了控制信息，该控制信息用于控制接受模块中的执行逻辑。")]),v._v(" "),a("li",[v._v("标记耦合，如果一个模块通过参数表传递记录信息，事实上这组模块共享了这个记录，它是某一数据结构的子结构，而不是简单变量。")]),v._v(" "),a("li",[v._v("数据耦合，两个模块模块之间仅通过参数表传递简单数据")]),v._v(" "),a("li",[v._v("非直接耦合，如果两个模块之间没有直接关系，即它们之间的联系完全是通过主模块的控制和调用实现的。")])]),v._v(" "),a("h2",{attrs:{id:"请简述-mvc-体系结构框架的含义和工作方式。-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-mvc-体系结构框架的含义和工作方式。-2"}},[v._v("#")]),v._v(" 请简述 MVC 体系结构框架的含义和工作方式。")]),v._v(" "),a("ul",[a("li",[v._v("MVC 强调将用户输入、数据模型和数据表示的方式分开设计，一个交互式应用系统由模型、视图和控制器三个部件组成，分别对应内部数据、数据表示和输入输出控制部分。")]),v._v(" "),a("li",[v._v("首先控制器接受用户请求，并决定应该由哪个模型来进行处理；然后模型用业务逻辑处理用户请求并返回数据，最后由控制器用相应视图格式化模型返回数据，并且通过表示层呈现给用户。")])]),v._v(" "),a("h2",{attrs:{id:"uml-中的活动图、状态图、顺序图都分别描述什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-中的活动图、状态图、顺序图都分别描述什么"}},[v._v("#")]),v._v(" UML 中的活动图、状态图、顺序图都分别描述什么?")]),v._v(" "),a("ul",[a("li",[v._v("活动图：描述了活动到活动的流，用来捕捉用例的活动，使用框图的方式显示其结果。描述了采取何种动作、动作的结果是什么、何时发生以及在何处发生")]),v._v(" "),a("li",[v._v("状态图：描述了一个特定对象的所有可能的状态以及引起状态转换的事件")]),v._v(" "),a("li",[v._v("顺序图：描述了系统在参与者的动作之下，内部多个对象之间的动作协作")])]),v._v(" "),a("h2",{attrs:{id:"请简述-coad-yourdon-的面向对象设计模型的内涵。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请简述-coad-yourdon-的面向对象设计模型的内涵。"}},[v._v("#")]),v._v(" 请简述 Coad & Yourdon 的面向对象设计模型的内涵。")]),v._v(" "),a("ul",[a("li",[v._v("Coad & Yourdon 基于 MVC 模型，在逻辑上将系统划分为 4 个部分，分别是问题域部分、人机交互部分、任务管理部分和数据管理部分，每一部分又可以划分为若干个子系统。在不同的软件系统中，这 4 个部分的重要程度和规模可能相差很大，在设计过程中可以将规模过大的子系统进一步划分为更小的子系统，规模过小的则可以合并到其他子系统中")]),v._v(" "),a("li",[v._v("Coad & Yourdon 在设计阶段继续采用了分析阶段中提到的 5 个层次，用于建立系统的 4 个组成部分。每个子系统都由主题、类-对象、结构、属性和服务 5 个层次组成。")])]),v._v(" "),a("h2",{attrs:{id:"简述提高软件质量的主要措施"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述提高软件质量的主要措施"}},[v._v("#")]),v._v(" 简述提高软件质量的主要措施")]),v._v(" "),a("p",[v._v("复审：是在软件生命收齐的每个阶段结束之前，都采用一定的标准对该段产生的软件配置成分进行严格的正式或非正式的检测")]),v._v(" "),a("p",[v._v("复查：是检查已有的材料，以判定在软件生命周期某个阶段的工作是否能够开始或继续")]),v._v(" "),a("p",[v._v("测试：包括测试计划、测试过程和测试结果三个阶段")]),v._v(" "),a("h2",{attrs:{id:"什么是软件工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件工程"}},[v._v("#")]),v._v(" 什么是软件工程")]),v._v(" "),a("p",[v._v("软件工程是知道计算机软件开发和维护的工程学科。它采用工程的概念、原理、技术和方法来开发和维护软件，把经过时间考验而证明正确的管理技术和当前能够得到的最好的技术结合起来。")]),v._v(" "),a("h2",{attrs:{id:"简述对象、类、消息、方法的基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述对象、类、消息、方法的基本概念"}},[v._v("#")]),v._v(" 简述对象、类、消息、方法的基本概念")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("对象是人们要进行研究的任何事务，从简单的整数到复杂的飞机都可以看作对象，它不仅能表示具体的事务，还能表示抽象的规则、计划或事件。")])]),v._v(" "),a("li",[a("p",[v._v("类是具有相同或相似性质的对象的抽象。对象的抽象是类，类的实例就是对象。类具有属性，它是对象状态的抽象，用数据结构来描述类的属性。类具有操作，它是对象行为的抽象，用操作名和实现该操作的方法来描述")])]),v._v(" "),a("li",[a("p",[v._v("对象之间的通信的结构叫做消息。在对象的操作中，当一个消息发送给某个对象时，消息包含接受对象去执行某种操作的信息。")])]),v._v(" "),a("li",[a("p",[v._v("类中操作的实现过程叫做方法。")])])]),v._v(" "),a("h2",{attrs:{id:"简述螺旋开发模型的基本开发过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述螺旋开发模型的基本开发过程"}},[v._v("#")]),v._v(" 简述螺旋开发模型的基本开发过程")]),v._v(" "),a("ol",[a("li",[v._v("需求分析。利用需求分析技术理解应用领域，获取初步的用户需求，指定项目开发计划")]),v._v(" "),a("li",[v._v("风险分析。根据初始需求或改进意见评审可选用的方案，给出消除或减少风险的途径")]),v._v(" "),a("li",[v._v("工程实现。利用快速原型方法针对已知的用户需求生成快速原型")]),v._v(" "),a("li",[v._v("评审。将原型提交给用户并征询用户改进意见")])]),v._v(" "),a("p",[v._v("将上述过程不断迭代。")])])}),[],!1,null,null,null);_.default=r.exports}}]);