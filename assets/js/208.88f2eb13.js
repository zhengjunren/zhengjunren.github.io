(window.webpackJsonp=window.webpackJsonp||[]).push([[208],{400:function(_,v,t){"use strict";t.r(v);var l=t(5),r=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_2015"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2015"}},[_._v("#")]),_._v(" 2015")]),_._v(" "),t("h2",{attrs:{id:"选择题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择题"}},[_._v("#")]),_._v(" 选择题")]),_._v(" "),t("ol",[t("li",[_._v("按照软件的作用，一般可以将软件分为（B）")])]),_._v(" "),t("p",[_._v("A. 系统软件、工具软件、支撑软件、可复用软件")]),_._v(" "),t("p",[_._v("B. 系统软件、应用软件、工具软件、可复用软件")]),_._v(" "),t("p",[_._v("C. 操作系统、应用软件、支撑软件、可复用软件")]),_._v(" "),t("p",[_._v("D. 系统软件、应用软件、支撑软件、工具软件")]),_._v(" "),t("p",[t("a",{attrs:{href:""}},[_._v("解：")]),_._v("软件分为系统软件、应用软件、支撑软件（工具软件）、可复用软件")]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[_._v("在面向对象软件开发中，系统架构被分为两大类，即（A）")])]),_._v(" "),t("p",[_._v("A. 逻辑架构和物理架构")]),_._v(" "),t("p",[_._v("B. 静态架构和动态架构")]),_._v(" "),t("p",[_._v("C. 逻辑架构和抽象架构")]),_._v(" "),t("p",[_._v("D. 物理架构和静态架构")]),_._v(" "),t("ol",{attrs:{start:"9"}},[t("li",[_._v("软件的结构包括两部分，即（B）")])]),_._v(" "),t("p",[_._v("A. 模块结构和过程结构")]),_._v(" "),t("p",[_._v("B. 模块结构和数据结构")]),_._v(" "),t("p",[_._v("C. 静态结构和动态结构")]),_._v(" "),t("p",[_._v("D. 组织结构和数据结构")]),_._v(" "),t("p",[t("a",{attrs:{href:""}},[_._v("解：")]),_._v("分为软件的模块结构和数据结构")]),_._v(" "),t("ol",{attrs:{start:"13"}},[t("li",[_._v("下列选项中那一项不是单元测试的内容（）")])]),_._v(" "),t("p",[_._v("A. 模块接口测试")]),_._v(" "),t("p",[_._v("B. 路径测试")]),_._v(" "),t("p",[_._v("C. 边界测试")]),_._v(" "),t("p",[_._v("D. 回归测试")]),_._v(" "),t("ol",{attrs:{start:"14"}},[t("li",[_._v("下列选项中哪一项不是设计模式的基本要素（B）")])]),_._v(" "),t("p",[_._v("A. 模式名称")]),_._v(" "),t("p",[_._v("B. 效率")]),_._v(" "),t("p",[_._v("C. 问题")]),_._v(" "),t("p",[_._v("D. 解决方案")]),_._v(" "),t("p",[t("a",{attrs:{href:""}},[_._v("解：")]),_._v("模式名称、问题、"),t("strong",[_._v("效果")]),_._v("、解决方案。")]),_._v(" "),t("ol",{attrs:{start:"16"}},[t("li",[_._v("软件工程方法学包含的 3 个要素是（D）")])]),_._v(" "),t("p",[_._v("A. 方法、模型和过程")]),_._v(" "),t("p",[_._v("B. 方法、工具和模型")]),_._v(" "),t("p",[_._v("C. 模型、过程和工具")]),_._v(" "),t("p",[_._v("D. 方法、工具和过程")]),_._v(" "),t("p",[t("a",{attrs:{href:""}},[_._v("解：")]),_._v("软件工程方法学包含三个要素："),t("strong",[_._v("方法、工具和过程")])]),_._v(" "),t("ol",{attrs:{start:"19"}},[t("li",[_._v("基于数据流的设计方法可以很方便地将数据流图中表示的数据流映射成（B）")])]),_._v(" "),t("p",[_._v("A. 对象模型")]),_._v(" "),t("p",[_._v("B. 软件结构")]),_._v(" "),t("p",[_._v("C. 系统架构")]),_._v(" "),t("p",[_._v("D. 组织结构")]),_._v(" "),t("p",[t("a",{attrs:{href:""}},[_._v("解：")]),_._v("基于数据流可以很方便地将数据流图中表示的数据映射成"),t("strong",[_._v("软件结构")])]),_._v(" "),t("h2",{attrs:{id:"简答题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简答题"}},[_._v("#")]),_._v(" 简答题")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("请简要描述 α 测试和 β 测试的内容，并比较异同。")]),_._v(" "),t("ul",[t("li",[_._v("α 测试是由一个用户在开发环境下进行的测试，也可以是公司内部的用户在模拟实际操作环境下进行的测试。软件在一个自然设置状态下使用，开发者坐在用户旁边，随时记下错误情况和使用中的问题，这是在受控环境下进行的测试。")]),_._v(" "),t("li",[_._v("β 测试是由软件的多个用户在一个或多个实际使用环境下进行的测试。这些用户是公司签订了支持产品预发行合同的外部用户，他们使用该产品，并愿意把所有翻新的错误信息反馈给开发者。")]),_._v(" "),t("li",[_._v("α 测试与 β 测试都是集成测试之后所进行的测试，都属于确认测试，所不同的是，α 测试是在开发环境中所作的测试，主要由开发方人员进行，而 β 测试则是由用户实际工作环境中所做的测试，不受开发人员的干扰。")])])]),_._v(" "),t("li",[t("strong",[_._v("请简述 MVC 体系结构框架的含义和工作方式。")]),_._v(" "),t("ul",[t("li",[_._v("MVC 强调将用户输入、数据模型和数据表示的分开设计，一个交互应用系统由模型（Model）、视图（view）和控制器（controller）3 个部件组成，分别对应于内部数据、数据表示和输入输出控制部分。")]),_._v(" "),t("li",[_._v("MVC 的处理过程为，首先控制器接受用户的请求，并决定应该调用哪一个模型来进行处理；然后模型用业务逻辑来处理用户的请求并返回数据；最后控制器用相应的视图格式化模型返回数据，并通过表示层诚信给用户。其中，模型是核心数据和功能，视图只关心显示数据，控制器只关心用户输入，这种结构由于将数据和业务规则从表示层分开，因此可以最大化地重用代码。")])])]),_._v(" "),t("li",[t("strong",[_._v("请描述并比较顺序图和协作图的功能和关系。")]),_._v(" "),t("ul",[t("li",[_._v("顺序图描述对象之间的动态交互关系，着重表现对象间消息传递的时间顺序")]),_._v(" "),t("li",[_._v("协作图是顺序图的一种变换形式，用于描述互相协作的对象间的交互关系和链接关系")]),_._v(" "),t("li",[_._v("顺序图和协作图都属于交互图，都描述相互协作的对象间的交互关系和，但它们侧重点不同：顺序图着重表现交互的时间顺序，协作图则着重表现交互对象的静态链接关系")])])]),_._v(" "),t("li",[t("strong",[_._v("请简要介绍结构化分析模型的内容。")]),_._v(" "),t("ul",[t("li",[_._v("该模型的核心是数据字典，包括在目标系统中使用和生成所有数据的对象。围绕这个核心有 3 种图：")]),_._v(" "),t("li",[_._v("数据流图描述数据在系统中如何被传送或者变换，以及描述如何对数据流进行变换的功能，用于功能建模")]),_._v(" "),t("li",[_._v("E-R 图描述对象及数据之间的关系，用于数据建模")]),_._v(" "),t("li",[_._v("状态图描述系统对外部时间如何响应、如何动作，用于行为建模")])])]),_._v(" "),t("li",[t("strong",[_._v("请简要介绍白盒介绍测试中逻辑覆盖主要分成哪几种测试覆盖，它们的含义分别是什么？")]),_._v(" "),t("ul",[t("li",[_._v("语句覆盖：设计若干测试用例、运行被测程序，使得每一个可执行的语句至少执行一次")]),_._v(" "),t("li",[_._v("判定覆盖：使得程序中每个判断的取真分支和假分支至少经历一次，又称为分支覆盖")]),_._v(" "),t("li",[_._v("条件覆盖：使得程序中每个判断的每个条件的可能取值至少执行一次")]),_._v(" "),t("li",[_._v("判定-条件覆盖：使得判断中每个条件的所有可能取值至少执行一次，同时每个判断本身的所有可能判断结果至少执行一次")]),_._v(" "),t("li",[_._v("条件组合覆盖：使得每个判断的所有可能的条件取值组合至少执行一次")]),_._v(" "),t("li",[_._v("路径覆盖：设计足够的测试用例，覆盖程序中所有可能的路径")])])]),_._v(" "),t("li",[t("strong",[_._v("请简要描述瀑布模型的含义，以及优点和缺点。")]),_._v(" "),t("ul",[t("li",[_._v("瀑布模型是将软件生存周期的各项活动规定为按照固定顺序而连接的若干阶段工作，形如瀑布流水，最终得到软件产品。开发过程是通过一系列阶段顺序展开的，从系统需求分析开始直到产品发布和维护，每个阶段都会产生循环反馈。")]),_._v(" "),t("li",[_._v("优点：\n"),t("ul",[t("li",[_._v("可强迫开发人员采用规范化的方法")]),_._v(" "),t("li",[_._v("严格规定了每个阶段必须提交的文档")]),_._v(" "),t("li",[_._v("要求每个阶段交出的所有产品都必须是经过验证的")])])]),_._v(" "),t("li",[_._v("缺点：\n"),t("ul",[t("li",[_._v("由于瀑布模型几乎完全依赖于书面的规格说明，很可能导致最终开发的产品不能真正满足用户的需要，如果需求规格说明与用户需求之间有差异，就会发生这种情况")]),_._v(" "),t("li",[_._v("瀑布模型只只用于项目开始时需求已确定的情况")])])])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);