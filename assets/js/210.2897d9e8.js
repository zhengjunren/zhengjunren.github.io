(window.webpackJsonp=window.webpackJsonp||[]).push([[210],{403:function(_,v,l){"use strict";l.r(v);var t=l(5),i=Object(t.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h1",{attrs:{id:"_2018"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2018"}},[_._v("#")]),_._v(" 2018")]),_._v(" "),l("h2",{attrs:{id:"选择题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#选择题"}},[_._v("#")]),_._v(" 选择题")]),_._v(" "),l("ol",{attrs:{start:"2"}},[l("li",[_._v("以下说法错误的是（A）")])]),_._v(" "),l("p",[_._v("A. 文档仅仅描述和规定了软件的使用范围及相关的操作命令")]),_._v(" "),l("p",[_._v("B. 文档也是软件产品的一部分，没有文档的软件就不成软件")]),_._v(" "),l("p",[_._v("C. 文档的编制在软件开发工作中占有突出的地位和相当大的工作量")]),_._v(" "),l("p",[_._v("D. 高质量文档对于发挥软件产品的效益有着重要的作用")]),_._v(" "),l("ol",{attrs:{start:"10"}},[l("li",[_._v("下列关于软件构件描述错误的是（）")])]),_._v(" "),l("p",[_._v("A. 是指在软件系统设计中能够重复使用的建筑模块。它包装了一系列相互关联的操作和服务")]),_._v(" "),l("p",[_._v("B. 构件既可以在设计时使用或进行修改，也可以在执行二进制模块时使用或者修改")]),_._v(" "),l("p",[_._v("C. 软件构件必须具有高质量的使用界面")]),_._v(" "),l("p",[_._v("D. 软件构件的基本思想：常见和利用和可复用的软构件来解决应用软件的开发问题")]),_._v(" "),l("ol",{attrs:{start:"17"}},[l("li",[_._v("以下哪项不属于面向对象设计模型的内容（）")])]),_._v(" "),l("p",[_._v("A. 编码风格")]),_._v(" "),l("p",[_._v("B. 数据管理")]),_._v(" "),l("p",[_._v("C. 任务管理")]),_._v(" "),l("p",[_._v("D. 人机交互")]),_._v(" "),l("h2",{attrs:{id:"简单题"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#简单题"}},[_._v("#")]),_._v(" 简单题")]),_._v(" "),l("ol",[l("li",[_._v("请简述螺旋开发模型内涵，及其与快速原型开发模型的异同点。\n"),l("ul",[l("li",[_._v("螺旋开发模型的内涵：使用原型及其他方法来尽量降低风险。把它看作在每个阶段之前都增加了风险分析过程的快速原型模型。")]),_._v(" "),l("li",[_._v("螺旋开发模型与快速原型模型的重要区别在于明确地考虑了开发中的风险。快速原型开发模型具有需求分析入手快速、表达直观、容易交流的特点，重点解决瀑布模型的需求分析入手难的问题；")]),_._v(" "),l("li",[_._v("螺旋开发模型结合了快速开发原型模型和瀑布模型，融进了循环往复，强化了演进迭代的思想，增加了风险控制环节。")]),_._v(" "),l("li",[_._v("螺旋开发模型与快速原型模型都是针对实现不能完整定义需求的软件开发，采取迭代的开发过程，在一定程度上减少了软件开发的盲目性。")])])]),_._v(" "),l("li",[_._v("请简要介绍适配器设计模式的含义、分类及实现机制。\n"),l("ul",[l("li",[_._v("适配器模式分为对象适配器和类适配器。")]),_._v(" "),l("li",[_._v("将一个类的接口转换称为客户所期望的另一种接口，使得原本不匹配的接口而无法合作的类可以一起工作")]),_._v(" "),l("li",[_._v("新编写一个适配器类，在适配器类中聚合被适配的接口或者继承被适配的类并且编写相应处理的函数，然后再调用者中调用适配器中的处理函数。")])])]),_._v(" "),l("li",[_._v("请简要介绍白盒测试中逻辑覆盖主要分成了哪几种测试覆盖，它们的含义分别是什么？\n"),l("ul",[l("li",[_._v("语句覆盖：设计若干用例，使得每个可执行的语句至少执行一次")]),_._v(" "),l("li",[_._v("判断覆盖：设计若干用例，使得每个判断中的真分支和假分支至少执行一次")]),_._v(" "),l("li",[_._v("条件覆盖：设计足够的用例，使得每个判断中的每个条件至少执行一次")]),_._v(" "),l("li",[_._v("判断-条件覆盖：设计足够测试用例，使得每个判断中每个条件的所有可能至少执行一次，同时每个判断条件本身所有的可能判断结果至少执行一次")]),_._v(" "),l("li",[_._v("条件组合覆盖：设计若干测试用例，使得每个判断的所有可能结果的条件取值组合至少执行一次")]),_._v(" "),l("li",[_._v("路径覆盖，设计足够的测试用例，覆盖程序中所有路径。")])])]),_._v(" "),l("li",[_._v("简述软件生存周期由哪些主要阶段组成，每一阶段的主要任务是什么？\n"),l("ul",[l("li",[_._v("概括的说，软件生存期由软件定义、软件开发和运行维护三个时期组成。")]),_._v(" "),l("li",[_._v("问题定义与可行性研究：本阶段要回答的关键问题是：到底要解决什么问题？在成本和时间的限制条件下能否解决问题？是否值得做？")]),_._v(" "),l("li",[l("strong",[_._v("需求分析")]),_._v("：本阶段要回答的关键问题是：目标系统应当做什么？")]),_._v(" "),l("li",[l("strong",[_._v("软件设计")]),_._v("：本阶段要回答的关键问题是：目标系统应当如何做？为此，必须在设计阶段制定设计方案，"),l("strong",[_._v("把已确定的各项需求转化为相应的软件体系结构，结构中每一组成部分都是意义明确的构件，此即为所谓概要设计")]),_._v("。"),l("strong",[_._v("进而具体描述各个构件所要完成的工作为源程序编码打下基础，此即所谓的详细设计。")])]),_._v(" "),l("li",[l("strong",[_._v("程序编码和单元测试")]),_._v("：本阶段要回答的关键问题是：如何正确地实施已做的设计，即如何编写正确的、可维护的程序代码？为此，需要选择合适的编程语言，把软件设计转换成计算机可以接受的程序代码，并对程序结构中的各个模块进行单元测试，然后运行调试手段排除发现的错误。要求编写的程序应是结构良好，清晰易读的，且与设计一致。")]),_._v(" "),l("li",[l("strong",[_._v("集成测试和系统测试")]),_._v("：集成测试的任务是将已测试过的模块按设计规定的顺序组装起乱来，在组装过程中检查模块连接中的问题。系统测试的任务是根据需求规格说明的要求，对必须实现的各项需求逐步进行确认，判断已开发的软件是否符合用户需求，能否交付用户使用，为了更有效地发现系统中的问题，通常这个阶段的工作由开发人员和用户之外的第三者承担。")]),_._v(" "),l("li",[l("strong",[_._v("软件运行和维护")]),_._v("：已交付的软件一旦投入正式使用便进入运行维护阶段，这一阶段可能持续若干年。软件在运行中可能由于多方面的原因需要对它进行修改。通常由四种类型的维护：改正性维护、适应性维护、预防性维护和完善性维护。")])])]),_._v(" "),l("li",[_._v("简述 Coad&Yourdon 的面向对象设计模型的内涵。\n"),l("ul",[l("li",[_._v("Coad & Yourdon 基于 MVC 模型，在逻辑上将系统划分为 4 个部分，分别是问题域部分、人际交互部分、任务管理部分及数据管理部分。每一部分又可分为若干个子系统。在不同的软件系统中，这 4 个部分的重要程度可能相差很大，在设计过程中可以将规模过大的子系统进一步划分为更小的子系统，规模过小的则可以合并到其他子系统中。")]),_._v(" "),l("li",[_._v("Coad & Yourdon 在设计阶段中继续采用了分析阶段中提到的 5 个层次，用于建立系统的四个组成部分。每一个子系统都由主题、类-对象、结构、属性和服务 5 个层次组成。")])])]),_._v(" "),l("li",[_._v("请简要介绍并比较 α 测试和 β 测试的内涵和异同。\n"),l("ul",[l("li",[_._v("α 测试是指，由一个用户在开发环境下进行的测试或公司内部用户在模拟实际操作环境下的测试，软件在在自然设置状态下进行的使用，开发人员坐在用户旁边，随时记下产生的错误和使用情况，称之为受控的测试。")]),_._v(" "),l("li",[_._v("β 测试是指，由多个用户在实际使用环境下进行的测试。这些用户和公司签订了预发行的合同的外部用户，他们使用该产品，并且将软件使用的错误信息反馈给公司。")]),_._v(" "),l("li",[_._v("α  测试与 β 测试都是集成测试之后所进行的测试，都属于确认测试，所不同的是，α 测试是在开发环境中所作的测试，主要由开发方人员进行，而 β 测试则是由用户实际工作环境中所做的测试，不受开发人员的干扰。")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);