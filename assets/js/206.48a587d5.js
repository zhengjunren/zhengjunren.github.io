(window.webpackJsonp=window.webpackJsonp||[]).push([[206],{399:function(v,_,a){"use strict";a.r(_);var t=a(5),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"简答题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简答题"}},[v._v("#")]),v._v(" 简答题")]),v._v(" "),a("h2",{attrs:{id:"软件产品的特性是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件产品的特性是什么"}},[v._v("#")]),v._v(" 软件产品的特性是什么")]),v._v(" "),a("p",[v._v("软件是一种逻辑产品，具有无形性；软件产品的生产主要是研制；软件不存在磨损和老化问题，但存在退化问题。")]),v._v(" "),a("p",[v._v("软件产品的生产主要是脑力劳动；软件产品的成本非常昂贵，其开发方式目前尚未完全摆脱手工生产方式")]),v._v(" "),a("h2",{attrs:{id:"软件发展有几个阶段-各有何特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件发展有几个阶段-各有何特征"}},[v._v("#")]),v._v(" 软件发展有几个阶段？各有何特征？")]),v._v(" "),a("ol",[a("li",[v._v("程序设计阶段\n"),a("ul",[a("li",[v._v("硬件特征：价格贵、存储容量小、运行可靠性差")]),v._v(" "),a("li",[v._v("软件特征：只有程序、程序设计概念，不重视程序设计方法。")])])]),v._v(" "),a("li",[v._v("程序系统测试\n"),a("ul",[a("li",[v._v("硬件特征：速度、容量及工作可靠性有明显提高，价格降低，销售量有爆炸性增长")]),v._v(" "),a("li",[v._v("软件特征：程序员数量猛增，开发人员素质低")])])]),v._v(" "),a("li",[v._v("软件工程阶段\n"),a("ul",[a("li",[v._v("硬件特征：向超高速、大容量、微型化以及网络化方向发展")]),v._v(" "),a("li",[v._v("软件特征：开发技术有很大进步，但未获得突破性进展，软件价格不断上升，未完全摆脱软件危机。")])])])]),v._v(" "),a("h2",{attrs:{id:"软件危机是什么-产生的原因是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件危机是什么-产生的原因是什么"}},[v._v("#")]),v._v(" 软件危机是什么？产生的原因是什么？")]),v._v(" "),a("p",[v._v("软件危机的出现是由于软件的规模越来越大，复杂度不断增加，软件需求量增大。而软件开发过程是一种高密集度的脑力劳动，软件开发的模式及技术不能适应软件发展的需要。致使大量质量低劣的软件涌向时长，有的花费大量人力财力，而在开发过程中就夭折。软件危机主要表现在两个方面：")]),v._v(" "),a("ol",[a("li",[v._v("软件产品质量低，甚至在开发过程中就夭折")]),v._v(" "),a("li",[v._v("软件生产率低，不能满足需要")])]),v._v(" "),a("h2",{attrs:{id:"什么是软件生存周期模型-有哪些主要模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件生存周期模型-有哪些主要模型"}},[v._v("#")]),v._v(" 什么是软件生存周期模型？有哪些主要模型")]),v._v(" "),a("p",[v._v("瀑布模型、增量模型、螺旋模型、喷泉模型、快速原型模型")]),v._v(" "),a("h2",{attrs:{id:"软件工程的七条基本原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件工程的七条基本原则"}},[v._v("#")]),v._v(" 软件工程的七条基本原则")]),v._v(" "),a("ol",[a("li",[v._v("用分阶段的生存周期计划严格管理")]),v._v(" "),a("li",[v._v("坚持进行阶段评审")]),v._v(" "),a("li",[v._v("严格实施的产品控制")]),v._v(" "),a("li",[v._v("采用现代程序技术")]),v._v(" "),a("li",[v._v("结果应能清楚地审查")]),v._v(" "),a("li",[v._v("开发小组成员应该小而精")]),v._v(" "),a("li",[v._v("承认不断改进软件工程的必要性")])]),v._v(" "),a("h2",{attrs:{id:"可行性研究包括哪几方面的内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可行性研究包括哪几方面的内容"}},[v._v("#")]),v._v(" 可行性研究包括哪几方面的内容")]),v._v(" "),a("ol",[a("li",[v._v("经济可行性：是否有经济效益，多长时间可以收回成本")]),v._v(" "),a("li",[v._v("技术可行性：现有技术能否实现本系统，现有技术人员能否胜任，开发系统的资源能否满足")]),v._v(" "),a("li",[v._v("运行可行性：系统操作在用户内部行得通吗？")]),v._v(" "),a("li",[v._v("法律可行性：新系统开发是否会侵犯他人、集体或国家利益，是否违反国家法律")])]),v._v(" "),a("h2",{attrs:{id:"结构化的需求分析描述工具有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构化的需求分析描述工具有哪些"}},[v._v("#")]),v._v(" 结构化的需求分析描述工具有哪些？")]),v._v(" "),a("p",[v._v("数据流图、数据字典、判定表、判定树、控制流图、状态转换图、实体-关系图")]),v._v(" "),a("h2",{attrs:{id:"uml-统一建模语言有哪几种图形"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uml-统一建模语言有哪几种图形"}},[v._v("#")]),v._v(" UML 统一建模语言有哪几种图形")]),v._v(" "),a("p",[v._v("用例图、类图、对象图、构架图、部署图、状态图、活动图、顺序图、协作图，")]),v._v(" "),a("h2",{attrs:{id:"面向对象分析类和对象的静态关系有哪几种"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象分析类和对象的静态关系有哪几种"}},[v._v("#")]),v._v(" 面向对象分析类和对象的静态关系有哪几种？")]),v._v(" "),a("p",[v._v("关联、聚集、泛化、依赖")]),v._v(" "),a("h2",{attrs:{id:"什么是模块化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块化"}},[v._v("#")]),v._v(" 什么是模块化")]),v._v(" "),a("p",[v._v("模块化是按照规定的原则讲一个大型软件划分为一个个较小的、相对独立又相关的模块")]),v._v(" "),a("p",[v._v("模块化的准则：")]),v._v(" "),a("ol",[a("li",[v._v("改进软件结构，提高模块独立性")]),v._v(" "),a("li",[v._v("模块大小要适中")]),v._v(" "),a("li",[v._v("软件结构图的深度、宽度、扇入扇出要适当")]),v._v(" "),a("li",[v._v("尽量降低模块接口的复杂程度")]),v._v(" "),a("li",[v._v("设计单入口、单出口的模块")]),v._v(" "),a("li",[v._v("模块的作用域应在控制域之内")])]),v._v(" "),a("h2",{attrs:{id:"什么是模块独立性-用什么度量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是模块独立性-用什么度量"}},[v._v("#")]),v._v(" 什么是模块独立性，用什么度量？")]),v._v(" "),a("h2",{attrs:{id:"什么是需求分析-需求分析阶段的基本任务是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是需求分析-需求分析阶段的基本任务是什么"}},[v._v("#")]),v._v(" 什么是需求分析？需求分析阶段的基本任务是什么？")]),v._v(" "),a("p",[v._v("需求分析是当前软件工程中的关键问题，需求分析阶段的任务是：在可行性分析的基础上，进一步了解、确定用户需求。准确地回答“系统必须做什么？”的问题。获取需求规格说明书。还涉及到软件系统的目标、软件系统提供的服务、软件系统的约束和软件系统运行的环境。它还设计这些因素和系统的精确规格说明以及系统进化之间的关系。")]),v._v(" "),a("h2",{attrs:{id:"内聚的类别有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内聚的类别有哪些"}},[v._v("#")]),v._v(" 内聚的类别有哪些")]),v._v(" "),a("ol",[a("li",[v._v("巧合内聚，又称为偶然内聚。当模块内各部分之间没有联系，或者即使有联系，这种联系也很松散，则称为巧合内聚。")]),v._v(" "),a("li",[v._v("逻辑内聚，这种模块把集中相关的功能组合在一起，每次被调用时，由传送给模块的判定参数来确定该模块应执行哪一种功能。")]),v._v(" "),a("li",[v._v("时间内聚，又称为经典内聚。这种模块大多为多功能模块，但模块的各个功能的执行与时间有关，通常要去所有功能必须在同一时间段内执行。")]),v._v(" "),a("li",[v._v("过程内聚，如果一个模块内的处理是相关的，而且必须以特定次序执行，则称为过程内聚")]),v._v(" "),a("li",[v._v("通信内聚，若果一个模块内各部分都使用了相同的输入数据，或产生了相同的输出数据，则称之为通信内聚模块。")]),v._v(" "),a("li",[v._v("信息内聚，这种模块完后多个功能，各个功能都在同一数据结构上操作，每一项功能有一个唯一的入口点。")]),v._v(" "),a("li",[v._v("功能内聚，一个模块中各个部分都是完成某一具体功能必不可少的组成部分。")])]),v._v(" "),a("h2",{attrs:{id:"软件测试的基本任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试的基本任务"}},[v._v("#")]),v._v(" 软件测试的基本任务")]),v._v(" "),a("p",[v._v("软件是是按照特定的规则，发现软件错误的过程；好的测试方案是尽可能发现迄今尚未发现的测试；成功的测试方案是发现了迄今尚未发现的错误。")]),v._v(" "),a("h2",{attrs:{id:"什么是黑盒测试-主要技术有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是黑盒测试-主要技术有哪些"}},[v._v("#")]),v._v(" 什么是黑盒测试？主要技术有哪些？")]),v._v(" "),a("p",[v._v("黑盒测试也称为功能测试，它着眼于程序的外部特征，而不考虑程序的内部结构，测试者把被测程序看成一个黑盒，不用关心程序的内部结构。黑盒测试是在程序接口处进行测试，它只检查程序功能是否能按照规格说明书的规定正常使用，程序是否能适当地接受输入数据产生正确的输出信息，并且保持外部信息的完整性。")]),v._v(" "),a("p",[v._v("黑盒测试采用的技术主要有：等价类划分、边界值分析法、错误推测法和因果图等。")]),v._v(" "),a("h2",{attrs:{id:"什么是白盒测试-主要技术有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是白盒测试-主要技术有哪些"}},[v._v("#")]),v._v(" 什么是白盒测试？主要技术有哪些？")]),v._v(" "),a("p",[v._v("白盒是是测试者了解被测程序的内部结构和处理过程，对程序的所有逻辑进行测试，在不同点检查程序状态，确定实际状态与预期状态是否一致。")]),v._v(" "),a("p",[v._v("主要数有：路径测试技术和事务处理流程基础，对包含大量逻辑判断或条件组合的程序采用基于逻辑的测试技术。")]),v._v(" "),a("h2",{attrs:{id:"软件维护分为哪几类-请简介。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件维护分为哪几类-请简介。"}},[v._v("#")]),v._v(" 软件维护分为哪几类，请简介。")]),v._v(" "),a("p",[v._v("完善性维护：满足用户在使用过程中提出增加新的功能或修改已有功能，以满足用户日益增长的需要而进行的工作")]),v._v(" "),a("p",[v._v("适应性维护：是软件适应新的运行环境而进行的工作")]),v._v(" "),a("p",[v._v("改正性维护：纠正开发期间未发现的遗留错误，即在程序使用期间发现程序错误进行诊断和改正的过程")]),v._v(" "),a("p",[v._v("预防性维护：为了改善未来的可维护性或可靠性而修改软件的过程。")]),v._v(" "),a("h2",{attrs:{id:"决定软件可维护性的因素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#决定软件可维护性的因素"}},[v._v("#")]),v._v(" 决定软件可维护性的因素")]),v._v(" "),a("ol",[a("li",[v._v("软件的可理解性、可测试性、可修改性")]),v._v(" "),a("li",[v._v("文档描述符合要求、用户文档简介明确、系统文档完整并且标准")])]),v._v(" "),a("h2",{attrs:{id:"软件测试的基本任务是什么-纠错与测试有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件测试的基本任务是什么-纠错与测试有什么区别"}},[v._v("#")]),v._v(" 软件测试的基本任务是什么？纠错与测试有什么区别？")]),v._v(" "),a("p",[v._v("软件测试的基本任务是通过在计算机上执行程序，暴露程序中潜在的错误。测试和纠错目的和任务都不同，测试是为了发现程序的错误，纠错是为了定位和纠正错误，从而消除软件故障，保证程序的可靠运行。")]),v._v(" "),a("p",[v._v("软件测试包括哪些步骤？")]),v._v(" "),a("ol",[a("li",[v._v("单元测试，目的是代码达到模块说明书中的要求")]),v._v(" "),a("li",[v._v("集成测试，目的是将经过单元测试的模块逐步组装成具有良好一致性的完整的程序")]),v._v(" "),a("li",[v._v("确认测试，目的是确认程序系统是否满足软件需求规格说明书的要求")]),v._v(" "),a("li",[v._v("系统测试，目的是检查能否与系统的其余部分协调运行。")])]),v._v(" "),a("h2",{attrs:{id:"什么是集成测试-渐增式和非渐增式有何区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是集成测试-渐增式和非渐增式有何区别"}},[v._v("#")]),v._v(" 什么是集成测试？渐增式和非渐增式有何区别？")]),v._v(" "),a("p",[v._v("将某块组合起来称为一个完整的系统对其进行测试叫做集成测试。不论是子系统测试还是系统测试，都兼有检测和组装两重含义，通常称为集成测试。")]),v._v(" "),a("p",[v._v("非渐增式是将模块先进行单元测试然后在组装在一起进行测试。渐增式是逐个将未测试的模块组装到已经测试过的模块上进行集成测试，每次加入一个就测试一次。非渐增式需要桩模块和驱动模块、非渐增式开始可以并行测试、渐增式可以及时发现接口错误，非渐增式很难发现接口错误、渐增式开始不能并行测试、渐增式测试比较彻底。")]),v._v(" "),a("h2",{attrs:{id:"什么是软件复用-请简述软件复用和软件共享、软件移植的差别。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件复用-请简述软件复用和软件共享、软件移植的差别。"}},[v._v("#")]),v._v(" 什么是软件复用？请简述软件复用和软件共享、软件移植的差别。")]),v._v(" "),a("p",[v._v("软件复用是指在构造新的软件系统的过程中，对已存在的软件人工制品的使用技术。如果是在一个系统中多次使用一个相同的软件成分，这叫软件共享。对一个软件进行修改，使它能运行于新的软、硬件平台，这成为软件移植。")]),v._v(" "),a("h2",{attrs:{id:"什么是软件再工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是软件再工程"}},[v._v("#")]),v._v(" 什么是软件再工程？")]),v._v(" "),a("p",[v._v("软件再工程是运用逆向功能、重构等技术，在充分理解软件的基础上，进行分解、综合、并重新构建软件，用以提高软件的可理解性、可维护性、可复用性或演化性。主要活动：信息库分析、文档重构、逆向工程、代码重构、数据重构、正向工程。")]),v._v(" "),a("h2",{attrs:{id:"面向对象和面向过程软件工程有哪些区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象和面向过程软件工程有哪些区别"}},[v._v("#")]),v._v(" 面向对象和面向过程软件工程有哪些区别")]),v._v(" "),a("ol",[a("li",[v._v("面向过程就是分析出解决所需要的步骤，然后用函数在这些步骤一步一步实现，使用的时候一个一个依次调用就可以了；面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描述某个事务在整个解决问题的步骤中的行为")]),v._v(" "),a("li",[v._v("面向过程是把一件事一项工程分解为一个个小的功能，用一个个函数来实现；面向对象是把事务看成是一个个小的对象组成的，或者说一个个小部分组成的。这些对象之间的相互关系，构成了整个项目，在面向对象的思想中，万物皆对象。而类就是对象的抽象")])]),v._v(" "),a("h2",{attrs:{id:"简述面向对象分析设计的三个模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简述面向对象分析设计的三个模型"}},[v._v("#")]),v._v(" 简述面向对象分析设计的三个模型")]),v._v(" "),a("p",[v._v("对象模型、动态模型、功能模型")]),v._v(" "),a("ol",[a("li",[v._v("对象模型描述系统的静态结构，包括类和对象，它们的属性和操作，以及他们之间的关系。构造对象模型的目的在于找出与应用程序的密切相关的概念。对象模型用包含对象以对象的关系图表示。")]),v._v(" "),a("li",[v._v("动态模型着重于系统的控制结构，考察在任何时候对象及其关系的改变，描述这些设计时序和改变的状态。动态模型包括状态图和时间跟踪图。")]),v._v(" "),a("li",[v._v("功能模型着重于系统内部数据的传送和处理。功能模型由多个数据流图组成，他们执行从外部输入")])]),v._v(" "),a("h2",{attrs:{id:"原型模型和增量模型区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模型和增量模型区别"}},[v._v("#")]),v._v(" 原型模型和增量模型区别")]),v._v(" "),a("p",[v._v("增量模型的特点是引进了增量包的概念，无须等到所有需求都出来，只要某个需求的增量包出来即可进行开发。虽然某个增量包可能还需要进一步适应客户的需求并且更改，但只要这个增量包足够小，其影响对整个项目来说是可以承受的")]),v._v(" "),a("p",[v._v("增量模型（incremental model）与原型实现模型和其他演化方法一样，本质上是迭代的，但与原型实现不一样的是其强调每一个增量均发布一个可操作产品。早期的增量是最终产品的“可拆卸”版本，但提供了为用户服务的功能，并且为用户提供了评估的平台。")]),v._v(" "),a("p",[v._v("快速原型模型又称原型模型，它是增量模型的另一种形式；它是在开发真实系统之前，构造一个原型，在该原型的基础上，逐渐完成整个系统的开发工作。快速原型模型的第一步是建造一个快速原型，实现客户或未来的用户与系统的交互，用户或客户对原型进行评价，进一步细化待开发软件的需求。通过逐步调整原型使其满足客户的要求，开发人员可以确定客户的真正需求是什么；第二步则在第一步的基础上开发客户满意的软件产品。")])])}),[],!1,null,null,null);_.default=r.exports}}]);