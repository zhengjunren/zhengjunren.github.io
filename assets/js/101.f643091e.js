(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{538:function(t,e,s){"use strict";s.r(e);var n=s(29),l=Object(n.a)({},(function(){var t=this.$createElement,e=this._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[e("h1",{attrs:{id:"和-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[this._v("#")]),this._v(" & 和 && 的区别")]),this._v(" "),e("p",[this._v('& 运算符有两种用法；1. 按位与，2. 逻辑与。&&运算符是短路与运算。\n逻辑与跟短路与的差别是非常巨大的，虽然二者都要求运算符左右两端的布尔值都是true整个表达式的值才是true。\n&&之所以称为短路运算是因为，如果&&左边的表达式的值是false，右边的表达式会被直接短路掉，不会进行运算。\n很多时候我们可能都需要用&&而不是&，例如在验证用户登录时判定用户名不是null而且不是空字符串，\n应当写为：username != null &&!username.equals("")，二者的顺序不能交换，更不能用&运算符，\n因为第一个条件如果不成立，根本不能进行字符串的equals比较，否则会产生NullPointerException异常。')])])}),[],!1,null,null,null);e.default=l.exports}}]);