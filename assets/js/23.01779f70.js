(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{217:function(t,s,a){"use strict";a.r(s);var n=a(5),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"错题集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错题集合"}},[t._v("#")]),t._v(" 错题集合")]),t._v(" "),a("h2",{attrs:{id:"选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[t._v("#")]),t._v(" 选择")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("已定义一下函数：该函数的返回值是：( C )"),a("br")]),t._v("\nA. 不确定的值　　　B. 形参 p 中存放的值　　　C. 形参 p 所指存储单元中的值　　　D. 形参 p 的地址值")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("用 c 语言编写的代码程序（B）"),a("br")]),t._v("\nA. 可立即执行　　　B. 是一个源程序　　　C. 经过编译即可执行　　　D. 经过编译解释即可执行"),a("br")])]),t._v(" "),a("p",[t._v("解释：C语言是一种高级语言，C语言源程序经过C语言编译程序编译之后，生成一个后缀为．OBJ的二进制文件(称为目标文件)，最后还要由称为“连接程序”(Link)的软件，把此．OBJ文件与c语言提供的各种库函数连接在一起，生成一个后缀． EXE的可执行文件。显然C语言不能立即执行。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[t._v("以下不合法的字符常量是（A）"),a("br")]),t._v("\nA. '\\018'　　　B. '\"'　　　C. '\\'　　　D. '\\xcc'")])]),t._v(" "),a("p",[t._v("每个字符常量都对应一个整数编码，所以表示一个字符有两种方式：\n一、直接写出字符本身，然后用一对单引号括起来。比如'A'，'1'等等。但是有一些特殊字符不能这样表示，比如单引号本身，不能写成 '''，会报错，所以给这些特殊字符前面加个“\\”符号标志一下，告诉编译器接下来的字符要当成普通字符来读，就像这样'''。\n二、用编码表示字符。就像用9527叫周星弛一样。具体做法是先写个斜杠，再加上编码，最后用单引号括起来。字符的编码是什么？查ASCII码表。注意这里的编码只能用八进制和十六进制，用八进制时前面加0或不加，用十六进制时前面加x。 比如'\\07'和'\\7'是一样的，是八进制。'\\x7'是十六进制。\n你的问题里 A、D是第二种表示方法，B、C是第一种表示方法，形式都没错，只有A里使用了八进制编码，就不应该出现8这个数字，所以A错了。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[t._v("有以下定义语句"),a("code",[t._v("double a, b; int w; long c;")]),t._v(" 若各变量已正确赋值，则下列选项中正确的表达式是（C）"),a("br")]),t._v("\nA. "),a("code",[t._v("a=a+b=b++")]),t._v("　　　B. "),a("code",[t._v("w%((int)a+b)")]),t._v("　　　C. (c+w)%(int)a　　　D. w=a==b;"),a("br")])]),t._v(" "),a("p",[t._v("解：D选项是语句不是表达式")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("strong",[t._v("已有定义："),a("code",[t._v("int x = 3, y = 4, z = 5;")]),t._v("，则表达式"),a("code",[t._v("!(x+y)+z-1&&y+z/2")]),t._v("的值为（D）"),a("br")]),t._v("\nA. 6　　　B. 0　　　C. 2　　　D. 1"),a("br")])]),t._v(" "),a("p",[t._v("解：该表达式等价于"),a("code",[t._v("(!(x+y)+z-1)&&(y+z/2)")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("strong",[t._v("有以下程序，程序输出为（D）")])])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d, %d, %d, %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("A. 0,1,2,0　　　B. 0,0,0,3　　　C. 1,1,2,0　　　D. 编译出错"),a("br")]),t._v(" "),a("p",[t._v("解：if 语句的 c=2; 将 if-else 分开，编译出错")]),t._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("strong",[t._v("在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值.如题,下列描述中不正确的是（D）"),a("br")]),t._v("\nA、字符型数组中可能存放字符串"),a("br"),t._v("\nB、可以对字符型数组进行整体输入、输出"),a("br"),t._v("\nC、可以对整型数组进行整体输入、输出"),a("br"),t._v("\nD、不能在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值"),a("br")])]),t._v(" "),a("p",[t._v('也许这个题不是这个意思,请注意赋值表达式的一般形式为：\n变量 赋值运算符 表达式； （见《C语言程序 第三版 谭浩强》第63页）\n而一楼的 char a[] = "abc"虽然合法,但却不能算是赋值表达式,而是字符数组的初始化.而 a[] = "abc"却是不合法的赋值表达式,那是不是可以说“不能在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值”是对的呢?如果要咬文嚼字的话,我到觉得像一楼说的那样,那个“整体赋值”有问题!关键是问题在哪儿呢?')]),t._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[a("strong",[t._v("下列说法错误的是（C）"),a("br")]),t._v("\nA. 在 C 中，函数中的自动变量可以赋初值，每调用一次，赋一次初值"),a("br"),t._v("\nB. 在 C 中，在调用函数时，实际参数和对应的形参在类型上只需要值兼容"),a("br"),t._v("\nC. 在 C 中，外部变量的隐含类别是自动存储类别"),a("br"),t._v("\nD. 在 C 中，函数形参可以说明为 register 变量"),a("br")])]),t._v(" "),a("p",[t._v("函数的形参不bai仅可以用auto或者register来说明，du因为函数的形参还可以用const来定义一个其值不可变的常量形参，还可以在main函数前定义一个结构体，然后用结构体名来定义函数的形参。")]),t._v(" "),a("p",[t._v("外部变量的隐含类别是外部存储类别，即extern")]),t._v(" "),a("p",[t._v("函数中的变量赋初值则每次调用都将会赋初值，如果想在第一次调用是赋一次初值，而在其后的调用过程中在第一次调用的基础上继续进行运算，则可以定义static静态变量并且直接赋予初值。")]),t._v(" "),a("p",[t._v("在调用函数时，实参和对应的形参在类型上只需赋值兼容。因为在计算机内部，像字符型或者各类符号（中文，法文，德文等等）都是以ASCII码值的形式存在，因此当对字符进行操作的时候同样可以通过四则运算来达成有关目的，只需知道对应的码值就可以了，所以只需赋值兼容都可以操作。"),a("br")]),t._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("strong",[t._v("以下关于函数的叙述中正确的是（B）"),a("br")]),t._v("\nA. 每个函数都可以被其他函数调用（包括 main 函数）"),a("br"),t._v("\nB. 每个函数都可以被单独编译"),a("br"),t._v("\nC. 每个函数都可以单独运行"),a("br"),t._v("\nD. 在一个函数内部可以定义另一个函数")])]),t._v(" "),a("p",[t._v("A、main函数是不能被任何函数调用的,C语言中，除了主函数外，用户定义的函数或库函数都可以互相进行调用，甚至可以自己调用自己。所以a错了"),a("br"),t._v("\nB、函数可以单独编译,每个函数都能单独写成一个文件,所以B对的"),a("br"),t._v("\nC、函数都要通过main函数的调用才能正确的运行,main函数是一个程序的唯一入口"),a("br"),t._v("\nD、函数是不可以嵌套使用的")])])}),[],!1,null,null,null);s.default=r.exports}}]);