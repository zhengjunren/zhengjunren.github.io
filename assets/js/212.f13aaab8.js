(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{404:function(_,v,t){"use strict";t.r(v);var l=t(5),i=Object(l.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"_2019"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2019"}},[_._v("#")]),_._v(" 2019")]),_._v(" "),t("h2",{attrs:{id:"填空题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#填空题"}},[_._v("#")]),_._v(" 填空题")]),_._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[_._v("软件可靠的度量常以总计运行时间为基础衡量多次故障产生之间的间隔，称之为（软件可靠性）")])]),_._v(" "),t("li",[t("p",[_._v("软件的维护通常包括四种类型，分别是（适应性维护）、（完善性维护）、（改正性维护）和（预防性维护）")])]),_._v(" "),t("li",[t("p",[_._v("软件工程的目标是运用先进的软件开发技术和管理方法来提高软件的（质量）和（生产率）")])])]),_._v(" "),t("h2",{attrs:{id:"选择题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#选择题"}},[_._v("#")]),_._v(" 选择题")]),_._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[_._v("现有一个计算类型的程序，它的输入只有一个 Y，其范围是 Y >= -50 && Y <= 50。现从输入的角度考虑设计了一组测试用例：-100、100、0。设计这组测试用例的方法是（）")])]),_._v(" "),t("p",[_._v("A. 条件覆盖测试")]),_._v(" "),t("p",[_._v("B. 边缘值分析法")]),_._v(" "),t("p",[_._v("C. 错误推测法")]),_._v(" "),t("p",[_._v("D. 等价类划分法")]),_._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[_._v("在用面向对象观点建立起的 3 中模型中，（B）是最基本、最真高、最核心的。")])]),_._v(" "),t("p",[_._v("A. 动态模型")]),_._v(" "),t("p",[_._v("B. 对象模型")]),_._v(" "),t("p",[_._v("C. 功能模型")]),_._v(" "),t("p",[_._v("D. 状态模型")]),_._v(" "),t("p",[_._v("[解]：面向对象分析模型由 3 种独立的模型构成：由用例和场景构成的功能模型（用例模型）；由类和对象表示的对象模型（静态模型）；由状态图、顺序图等表示的动态模型（交互模型）。这三种模型的重要程度是不同的。用例模型是从用户的角度描述系统的功能，它是整个后续工作单位的基础，也是测试和验收的依据。面向对象系统中的类、接口以及对象是软件的基本组成单元，因此对象模型是必须建立的，也是核心模型。")]),_._v(" "),t("ol",{attrs:{start:"8"}},[t("li",[_._v("在软件生命周期中，能准确确定软件系统的体系结构的功能阶段是（A）")])]),_._v(" "),t("p",[_._v("A. 概要设计")]),_._v(" "),t("p",[_._v("B. 详细设计")]),_._v(" "),t("p",[_._v("C. 需求分析")]),_._v(" "),t("p",[_._v("D. 可行性分析")]),_._v(" "),t("h2",{attrs:{id:"简答题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简答题"}},[_._v("#")]),_._v(" 简答题")]),_._v(" "),t("ol",[t("li",[t("strong",[_._v("请简要介绍结构化分析模型的内容。")]),_._v(" "),t("ul",[t("li",[_._v("该模型的核心是数据字典，包括在目标系统中使用和生成的所有数据对象。围绕这个核心有 3 种图：数据流图描述数据在系统中如何被传送或变换，以及描述如何对数据进行变换的功能，用于功能建模；实体-关系图描述对象及数据对象之间的关系，用于数据建模；状态图描述系统对外部事务如何响应、如何动作，用于行为建模。")])])]),_._v(" "),t("li",[t("strong",[_._v("软件生命周期有哪几个阶段和各阶段的任务是什么？")]),_._v(" "),t("ul",[t("li",[_._v("问题定义与可行性研究，本阶段要回答的关键问题是：到底要解决什么问题？在成本和时间的限制条件下能否解决问题？是否值得做？为此，必须确定待开发软件系统的总目标，给出它的功能、性能、约束、接口以及可靠性等方面的要求。")]),_._v(" "),t("li",[_._v("需求分析，本阶段要回答的关键问题是：目标系统应当做什么？为此必须对用户要求进行分析，明确目标系统的功能需求和非功能需求，并通过建立分析模型，从功能、数据、行为等方面描述系统的静态特性和动态特性，对目标系统做进一步的细化，了解系统的各种需求细节。")]),_._v(" "),t("li",[_._v("软件设计，本阶段要回答的关键问题是：目标系统如何做？为此，必须在设计阶段指定设计方案，把已确定的各项需求转换成相应的软件体系结构，结构中每一组成部分都是意义明确的构件，此即所谓概要设计。进而具体描述每个构件所要完成的工作，为源程序编码打下基础，此即所谓详细设计。")]),_._v(" "),t("li",[_._v("程序编码和单元测试，本阶段要解决的问题是：如何正确地实现已做的设计，即如何编写正确的、可维护的程序代码？为此需要选择何事的编程语言，把软件设计转换成计算机可以接受的程序代码，应对程序结构中的各个模块进行单元测试，然后用调试排除发现的错误。")]),_._v(" "),t("li",[_._v("集成测试和系统测试，本阶段的主要任务是做集成测试和系统测试。集成测试的任务是将已测试的模块按设计规定的顺序组装起来，在组装过程中检查模块连接中的问题。系统测试的任务是根据需求规格说明的要求，对必须实现的各项需求逐项进行确认，判定已开发的软件是否符合用户需求，能否交付用户使用。")]),_._v(" "),t("li",[_._v("软件运行和维护，已交付的软件一旦投入正式使用便进入运行阶段，这一阶段可能持续若干年。软件在运行中可能由于多方面的原因需要对它进行修改，通常由四类维护：改正性维护、适应性维护、完善性维护和预防性维护。")])])]),_._v(" "),t("li",[t("strong",[_._v("耦合衡量不同模块彼此间相互依赖的紧密程度，耦合的类别有哪些？请简要介绍")]),_._v(" "),t("ul",[t("li",[_._v("内容耦合。如果发生下列情形，两个模块之间就发生了内容耦合：\n"),t("ul",[t("li",[_._v("一个模块直接访问另一个模块的内部数据")]),_._v(" "),t("li",[_._v("一个模块不通过正常入口转到另一个模块内部")]),_._v(" "),t("li",[_._v("两个模块有一部分程序代码重叠")]),_._v(" "),t("li",[_._v("一个模块有多个入口")])])]),_._v(" "),t("li",[_._v("公共耦合，若一组模块都访问同一个公共数据环境，则他们之间的耦合就称为公共耦合。公共数据环境可以是全局数据结构、共享的通信区、内存的公共覆盖区等")]),_._v(" "),t("li",[_._v("外部耦合，若一组模块都访问同一全局简单变量而不是同一全局数据结构，而不是通过参数表传递该全局变量的信息")]),_._v(" "),t("li",[_._v("控制耦合，如果一个模块传递给另一个模块的参数中包含了控制信息，该控制信息用于控制接受模块中的执行逻辑。")]),_._v(" "),t("li",[_._v("标记耦合，如果一个模块通过参数表传递记录信息，事实上这组模块共享了这个记录，它是某一数据结构的子结构，而不是简单变量。")]),_._v(" "),t("li",[_._v("数据耦合，两个模块模块之间仅通过参数表传递简单数据")]),_._v(" "),t("li",[_._v("非直接耦合，如果两个模块之间没有直接关系，即它们之间的联系完全是通过主模块的控制和调用实现的。")])])]),_._v(" "),t("li",[t("strong",[_._v("请简述 MVC 体系结构框架的含义和工作方式。")]),_._v(" "),t("ul",[t("li",[_._v("MVC 强调将用户输入、数据模型和数据表示的方式分开设计，一个交互式应用系统由模型、视图和控制器三个部件组成，分别对应内部数据、数据表示和输入输出控制部分。")]),_._v(" "),t("li",[_._v("首先控制器接受用户请求，并决定应该由哪个模型来进行处理；然后模型用业务逻辑处理用户请求并返回数据，最后由控制器用相应视图格式化模型返回数据，并且通过表示层呈现给用户。")])])]),_._v(" "),t("li",[t("strong",[_._v("UML 中的活动图、状态图、顺序图都分别描述什么?")]),_._v(" "),t("ul",[t("li",[_._v("活动图：描述了活动到活动的流，用来捕捉用例的活动，使用框图的方式显示其结果。")]),_._v(" "),t("li",[_._v("状态图：描述了一个特定对象的所有可能的状态以及引起状态转换的事件")]),_._v(" "),t("li",[_._v("顺序图：描述了系统在参与者的动作之下，内部多个对象之间的动作协作")])])]),_._v(" "),t("li",[t("strong",[_._v("请简述 Coad & Yourdon 的面向对象设计模型的内涵。")]),_._v(" "),t("ul",[t("li",[_._v("Coad & Yourdon 基于 MVC 模型，在逻辑上将系统划分为 4 个部分，分别是问题域部分、人机交互部分、任务管理部分和数据管理部分，每一部分又可以划分为若干个子系统。在不同的软件系统中，这 4 个部分的重要程度和规模可能相差很大，在设计过程中可以将规模过大的子系统进一步划分为更小的子系统，规模过小的则可以合并到其他子系统中")]),_._v(" "),t("li",[_._v("Coad & Yourdon 在设计阶段继续采用了分析阶段中提到的 5 个层次，用于建立系统的 4 个组成部分。每个子系统都由主题、类-对象、结构、属性和服务 5 个层次组成。")])])])])])}),[],!1,null,null,null);v.default=i.exports}}]);