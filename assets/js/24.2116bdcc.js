(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{218:function(s,t,a){"use strict";a.r(t);var n=a(5),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"错题集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错题集合"}},[s._v("#")]),s._v(" 错题集合")]),s._v(" "),a("h2",{attrs:{id:"选择"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择"}},[s._v("#")]),s._v(" 选择")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("已定义一下函数：该函数的返回值是：( C )"),a("br")]),s._v("\nA. 不确定的值　　　B. 形参 p 中存放的值　　　C. 形参 p 所指存储单元中的值　　　D. 形参 p 的地址值")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[s._v("用 c 语言编写的代码程序（B）"),a("br")]),s._v("\nA. 可立即执行　　　B. 是一个源程序　　　C. 经过编译即可执行　　　D. 经过编译解释即可执行"),a("br")])]),s._v(" "),a("p",[s._v("解释：C语言是一种高级语言，C语言源程序经过C语言编译程序编译之后，生成一个后缀为．OBJ的二进制文件(称为目标文件)，最后还要由称为“连接程序”(Link)的软件，把此．OBJ文件与c语言提供的各种库函数连接在一起，生成一个后缀． EXE的可执行文件。显然C语言不能立即执行。")]),s._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("strong",[s._v("以下不合法的字符常量是（A）"),a("br")]),s._v("\nA. '\\018'　　　B. '\"'　　　C. '\\'　　　D. '\\xcc'")])]),s._v(" "),a("p",[s._v("每个字符常量都对应一个整数编码，所以表示一个字符有两种方式：\n一、直接写出字符本身，然后用一对单引号括起来。比如'A'，'1'等等。但是有一些特殊字符不能这样表示，比如单引号本身，不能写成 '''，会报错，所以给这些特殊字符前面加个“\\”符号标志一下，告诉编译器接下来的字符要当成普通字符来读，就像这样'''。\n二、用编码表示字符。就像用9527叫周星弛一样。具体做法是先写个斜杠，再加上编码，最后用单引号括起来。字符的编码是什么？查ASCII码表。注意这里的编码只能用八进制和十六进制，用八进制时前面加0或不加，用十六进制时前面加x。 比如'\\07'和'\\7'是一样的，是八进制。'\\x7'是十六进制。\n你的问题里 A、D是第二种表示方法，B、C是第一种表示方法，形式都没错，只有A里使用了八进制编码，就不应该出现8这个数字，所以A错了。")]),s._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("strong",[s._v("有以下定义语句"),a("code",[s._v("double a, b; int w; long c;")]),s._v(" 若各变量已正确赋值，则下列选项中正确的表达式是（C）"),a("br")]),s._v("\nA. "),a("code",[s._v("a=a+b=b++")]),s._v("　　　B. "),a("code",[s._v("w%((int)a+b)")]),s._v("　　　C. (c+w)%(int)a　　　D. w=a==b;"),a("br")])]),s._v(" "),a("p",[s._v("解：D选项是语句不是表达式")]),s._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("strong",[s._v("已有定义："),a("code",[s._v("int x = 3, y = 4, z = 5;")]),s._v("，则表达式"),a("code",[s._v("!(x+y)+z-1&&y+z/2")]),s._v("的值为（D）"),a("br")]),s._v("\nA. 6　　　B. 0　　　C. 2　　　D. 1"),a("br")])]),s._v(" "),a("p",[s._v("解：该表达式等价于"),a("code",[s._v("(!(x+y)+z-1)&&(y+z/2)")])]),s._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[a("strong",[s._v("有以下程序，程序输出为（D）")])])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[s._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[s._v("include")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("<stdio.h>")])]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d, %d, %d, %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("A. 0,1,2,0　　　B. 0,0,0,3　　　C. 1,1,2,0　　　D. 编译出错"),a("br")]),s._v(" "),a("p",[s._v("解：if 语句的 c=2; 将 if-else 分开，编译出错")]),s._v(" "),a("ol",{attrs:{start:"7"}},[a("li",[a("strong",[s._v("在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值.如题,下列描述中不正确的是（D）"),a("br")]),s._v("\nA、字符型数组中可能存放字符串"),a("br"),s._v("\nB、可以对字符型数组进行整体输入、输出"),a("br"),s._v("\nC、可以对整型数组进行整体输入、输出"),a("br"),s._v("\nD、不能在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值"),a("br")])]),s._v(" "),a("p",[s._v('也许这个题不是这个意思,请注意赋值表达式的一般形式为：\n变量 赋值运算符 表达式； （见《C语言程序 第三版 谭浩强》第63页）\n而一楼的 char a[] = "abc"虽然合法,但却不能算是赋值表达式,而是字符数组的初始化.而 a[] = "abc"却是不合法的赋值表达式,那是不是可以说“不能在赋值语句中通过赋值运算符“=”对字符型数组进行整体赋值”是对的呢?如果要咬文嚼字的话,我到觉得像一楼说的那样,那个“整体赋值”有问题!关键是问题在哪儿呢?')]),s._v(" "),a("ol",{attrs:{start:"8"}},[a("li",[a("strong",[s._v("下列说法错误的是（C）"),a("br")]),s._v("\nA. 在 C 中，函数中的自动变量可以赋初值，每调用一次，赋一次初值"),a("br"),s._v("\nB. 在 C 中，在调用函数时，实际参数和对应的形参在类型上只需要值兼容"),a("br"),s._v("\nC. 在 C 中，外部变量的隐含类别是自动存储类别"),a("br"),s._v("\nD. 在 C 中，函数形参可以说明为 register 变量"),a("br")])]),s._v(" "),a("p",[s._v("函数的形参不bai仅可以用auto或者register来说明，du因为函数的形参还可以用const来定义一个其值不可变的常量形参，还可以在main函数前定义一个结构体，然后用结构体名来定义函数的形参。")]),s._v(" "),a("p",[s._v("外部变量的隐含类别是外部存储类别，即extern")]),s._v(" "),a("p",[s._v("函数中的变量赋初值则每次调用都将会赋初值，如果想在第一次调用是赋一次初值，而在其后的调用过程中在第一次调用的基础上继续进行运算，则可以定义static静态变量并且直接赋予初值。")]),s._v(" "),a("p",[s._v("在调用函数时，实参和对应的形参在类型上只需赋值兼容。因为在计算机内部，像字符型或者各类符号（中文，法文，德文等等）都是以ASCII码值的形式存在，因此当对字符进行操作的时候同样可以通过四则运算来达成有关目的，只需知道对应的码值就可以了，所以只需赋值兼容都可以操作。"),a("br")]),s._v(" "),a("ol",{attrs:{start:"9"}},[a("li",[a("strong",[s._v("以下关于函数的叙述中正确的是（B）"),a("br")]),s._v("\nA. 每个函数都可以被其他函数调用（包括 main 函数）"),a("br"),s._v("\nB. 每个函数都可以被单独编译"),a("br"),s._v("\nC. 每个函数都可以单独运行"),a("br"),s._v("\nD. 在一个函数内部可以定义另一个函数")])]),s._v(" "),a("p",[s._v("A、main函数是不能被任何函数调用的,C语言中，除了主函数外，用户定义的函数或库函数都可以互相进行调用，甚至可以自己调用自己。所以a错了"),a("br"),s._v("\nB、函数可以单独编译,每个函数都能单独写成一个文件,所以B对的"),a("br"),s._v("\nC、函数都要通过main函数的调用才能正确的运行,main函数是一个程序的唯一入口"),a("br"),s._v("\nD、函数是不可以嵌套使用的")]),s._v(" "),a("ol",{attrs:{start:"10"}},[a("li",[a("strong",[s._v("以下函数值的返回类型是（A）"),a("br")]),s._v("\nA. int　　　B. 不确定　　　C. void　　　D. float")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("fun")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("C语言中如果函数前不加任何数据类型时，默认函数的类型为整型，函数的类型就是函数返回值的类型")]),s._v(" "),a("ol",{attrs:{start:"11"}},[a("li",[a("strong",[s._v("若已定义的函数有返回值，则以下关于该函数调用的叙述中错误的是（D）"),a("br")]),s._v("\nA. 函数调用可以作为独立的语句存在"),a("br"),s._v("\nB. 函数调用可以作为一个函数的实参"),a("br"),s._v("\nC. 函数调用可以出现在表达式中"),a("br"),s._v("\nD. 函数调用可以作为一个函数的形参")])]),s._v(" "),a("p",[s._v("C语言函数的参数会出现在两个地方，分别是函数定义处和函数调用处，这两个地方的参数是有区别的。\n"),a("strong",[s._v("形参（形式参数）")]),s._v("\n在函数定义中出现的参数可以看做是一个占位符，它没有数据，只能等到函数被调用时接收传递进来的数据，所以称为形式参数，简称形参。")]),s._v(" "),a("p",[a("strong",[s._v("实参（实际参数）")]),s._v("\n函数被调用时给出的参数包含了实实在在的数据，会被函数内部的代码使用，所以称为实际参数，简称实参。")]),s._v(" "),a("p",[s._v("形参和实参的功能是传递数据，发生函数调用时，实参的值会传递给形参。")]),s._v(" "),a("ol",{attrs:{start:"12"}},[a("li",[a("strong",[s._v("以下不能正确进行字符串赋初值的语句是（A）"),a("br")]),s._v('\nA．char str[5]= "good!";'),a("br"),s._v('\nB．char str[]= "good!";'),a("br"),s._v('\nC．char *str= "good!";'),a("br"),s._v("\nD．char str[5]= {'g', 'o', 'o', 'd'};"),a("br")])]),s._v(" "),a("p",[s._v("[解析]选项A定义了一个字符数组str，具有5个元素，但赋初值的时候，初值个数却是6个(有一个'\\0'，)；"),a("br"),s._v("\n选项B定义了一个字符数组str并给它赋初值，由于省去了长度定义，长度由初值个数确定，相当于str[6]；"),a("br"),s._v("\n选项C定义了一个字符型指针变量并用一个字符串给它赋初值，使该字符型指针指向了该字符串；"),a("br"),s._v("\n选项D是对字符型数组中单个元素依次赋初值。")]),s._v(" "),a("ol",{attrs:{start:"13"}},[a("li",[a("strong",[s._v("以下叙述中错误的是(D)。"),a("br")]),s._v("\nA．二进制文件打开后可以先读文件的末尾，而顺序文件不可以"),a("br"),s._v("\nB．在程序结束时，应当用fclose函数关闭已打开的文件"),a("br"),s._v("\nC．在利用fread函数从二进制文件中读数据时，可以用数组名给数组中所有元素读入数据"),a("br"),s._v("\nD．不可以用FILE定义指向二进制文件的文件指针")])]),s._v(" "),a("p",[s._v("[解析] 顺序文件只能从头读写，二进制文件可以随机读写，选项A正确；"),a("br"),s._v("\n文件在使用后应关闭，当程序结束时，应当把打开的文件关闭，选项B正确；"),a("br"),s._v("\n用fread()函数可以一次性地读取同类型的很多数据，选项C正确；"),a("br"),s._v("\n在C语言中指向各种文件的文件指针都是通过FILE来定义的，故选项D是错误的。所以4个选项中选D")]),s._v(" "),a("ol",{attrs:{start:"14"}},[a("li",[a("strong",[s._v("以下叙述中不正确的是(D)"),a("br")]),s._v("\nA．C语言中的文本文件以ASCII码形式存储数据"),a("br"),s._v("\nB．C语言中对二进制文件的访问速度比文本文件快"),a("br"),s._v("\nC．C语言中，随机读写方式不适用于文本文件"),a("br"),s._v("\nD．C语言中，顺序读写方式不适用于二进制文件")])]),s._v(" "),a("p",[s._v("[解析]在C语言中文本文件是以ASCII码形式存放的，每个字符占一个字节。由于数据在计算机中是以二进制形式存放的，因此二进制文件中的数据可以直接读出，而不需要像文本文件那样把ASCII码转换成二进制，因此速度较快。在文本文件中，数据以ASCII码形式存放的，用户很难判定一个数据到底占几个字节，所以不适合使用随机读写方式。")]),s._v(" "),a("ol",{attrs:{start:"15"}},[a("li",[a("strong",[s._v("下列程序执行后数出的结果是（A）"),a("br")]),s._v("\nA. 6, 6, 6.0, 6.0　　　B. 6, 6, 6.7, 6.7　　　C. 6, 6, 6.0, 6.7　　　D. 6, 6, 6.7, 6.0"),a("br")])]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("long")]),s._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" l "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%d, %ld, %.1f, %.1f"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" l"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("[解析] 20/3 是整型变量相除，结果为6，再赋值给变量 d")]),s._v(" "),a("ol",{attrs:{start:"16"}},[a("li",[a("strong",[s._v("在 C 语言中，下列说法正确的是：（D）"),a("br")]),s._v("\nA. do-while 语句构成的循环不能用其他语句构成的循环代替"),a("br"),s._v('\nB. "do 语句 while(条件)" 的循环必须使用 "break" 语句退出循环'),a("br"),s._v('\nC. "do 语句 while(条件)" 的循环中，当条件为非 0 时结束循环'),a("br"),s._v('\nD. "do 语句 while(条件)" 的循环中，当条件为 0 时结束循环')])]),s._v(" "),a("p",[s._v("[解析]")]),s._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("do")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);