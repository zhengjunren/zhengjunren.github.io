(window.webpackJsonp=window.webpackJsonp||[]).push([[122],{316:function(t,s,n){"use strict";n.r(s);var r=n(5),e=Object(r.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"springaop"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springaop"}},[this._v("#")]),this._v(" SpringAOP")]),this._v(" "),s("p",[this._v("传统 OOP 面向对象开发，逻辑是自上而下的，在这些自上而下的过程中会产生一些横切性的问题，这些横切性问题与主业务无关，会散落在代码的各个地方，造成难以维护。而 AOP 编程思想就是把这些横切性的问题和主业务分开，达到与主业务解耦的目的")])])}),[],!1,null,null,null);s.default=e.exports}}]);