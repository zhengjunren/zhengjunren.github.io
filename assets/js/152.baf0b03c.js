(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{344:function(a,v,t){"use strict";t.r(v);var r=t(5),e=Object(r.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"java-虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-虚拟机"}},[a._v("#")]),a._v(" Java 虚拟机")]),a._v(" "),t("h2",{attrs:{id:"java内存模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型"}},[a._v("#")]),a._v(" Java内存模型")]),a._v(" "),t("p",[t("img",{attrs:{src:"/java/Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.webp",alt:"Java内存模型"}})]),a._v(" "),t("p",[a._v("内存主要分为5块，分别为：堆，方法区，程序计数器，本地方法栈，虚拟机栈。")]),a._v(" "),t("p",[a._v("其中堆和方法区这两块的内存是共享的。程序计数器，本地方法栈和虚拟机栈这三块的内存加起来就组合成了线程栈，我们都知道Java内存被分为堆内存和栈内存，这里的栈内存就是线程栈，每个线程都有一个线程栈，可想而知线程栈是私有的，一个进程的内存中随着线程数量的增加，就会有多个线程栈出现，一个线程对应一个线程栈。")]),a._v(" "),t("p",[a._v("堆（Heap）：是内存中最大的一块，被线程共享，用来存放对象实例。堆如果要细分的话还可以细分为新生代和老年代两部分，新生代还可以再细分为Eden，From Survivor，To Survivor。因为GC自动回收机制就是回收的堆内存，所以划分的这么清楚就是为了提高内存的回收效率。")]),a._v(" "),t("p",[a._v("方法区：是线程共享的，也是线程安全的。用来存储已经被虚拟机加载的类信息，常量，静态变量，以及即时编译器编译后的代码数据，常量池和静态池也在方法区中。")]),a._v(" "),t("p",[a._v("程序计数器：是内存中最小的一块。它可以被看作是当前线程所执行的字节码的行号指示器，在虚拟机的概念模型中，字节码执行器在工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支，跳转，循环，异常处理，线程恢复等基本功能都是依赖计数器来完成的。")]),a._v(" "),t("p",[a._v("本地方法栈：Native Method 原生方法是Java调用非Java方法接口，方法的实现也是非Java方法的实现，比如C或C++。有一点需要注意，调用非Java接口也会涉及GC和OOM。")]),a._v(" "),t("p",[a._v("Java虚拟机栈：线程私有的，生命周期和线程一样。虚拟机栈描述的是方法执行时的内存模型，每个方法执行的时候同时会创建一个栈帧，用来存放局部变量表，操作数栈，动态链接，方法出口等信息。")])])}),[],!1,null,null,null);v.default=e.exports}}]);