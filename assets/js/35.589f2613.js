(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{526:function(t,s,n){"use strict";n.r(s);var a=n(6),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"printf-scanf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#printf-scanf"}},[t._v("#")]),t._v(" printf&scanf")]),t._v(" "),n("h2",{attrs:{id:"printf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#printf"}},[t._v("#")]),t._v(" printf")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%5d\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%5c\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%5s\\n\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abcd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%-5dA\\n\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%7.2lf\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%7.lf\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// %7.0lf 和 %7.lf等价")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%.5f\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%-11lf\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12.345")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a=%d,b=%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出  a=1,b=111")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:"/c/printf.png",alt:"运行结果"}})]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("格式控制符")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[n("code",[t._v("%c")])]),t._v(" "),n("td",[t._v("输出一个单一的字符")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%hd")]),t._v("、"),n("code",[t._v("%d")]),t._v("、 "),n("code",[t._v("%ld")])]),t._v(" "),n("td",[t._v("以十进制、有符号的形式输出 short、int、long 类型的整数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%hu")]),t._v("、"),n("code",[t._v("%u")]),t._v("、"),n("code",[t._v("%lu")])]),t._v(" "),n("td",[t._v("以十进制、无符号的形式输出 short、int、long 类型的整数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%ho")]),t._v("、"),n("code",[t._v("%o")]),t._v("、"),n("code",[t._v("%lo")])]),t._v(" "),n("td",[t._v("以八进制、不带前缀、无符号的形式输出 short、int、long 类型的整")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%#ho")]),t._v("、"),n("code",[t._v("%#o")]),t._v("、"),n("code",[t._v("%#lo")])]),t._v(" "),n("td",[t._v("以八进制、带前缀、无符号的形式输出 short、int、long 类型的整数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%hx")]),t._v("、"),n("code",[t._v("%x")]),t._v("、"),n("code",[t._v("%lx")]),t._v("、"),n("br"),n("code",[t._v("%hX")]),t._v("、"),n("code",[t._v("%X")]),t._v("、"),n("code",[t._v("%lX")])]),t._v(" "),n("td",[t._v("以十六进制、不带前缀、无符号的形式输出 short、int、long 类型的整数。如果 x 小写，那么输出的十六进制数字也小写；如果 X 大写，那么输出的十六进制数字也大写。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%#hx")]),t._v("、"),n("code",[t._v("%#x")]),t._v("、"),n("code",[t._v("%#lx")]),n("br"),n("code",[t._v("%#hX")]),t._v("、"),n("code",[t._v("%#X")]),t._v("、"),n("code",[t._v("%#lX")])]),t._v(" "),n("td",[t._v("以十六进制、带前缀、无符号的形式输出 short、int、long 类型的整数。如果 x 小写，那么输出的十六进制数字和前缀都小写；如果 X 大写，那么输出的十六进制数字和前缀都大写。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%f")]),t._v("、"),n("code",[t._v("%lf")])]),t._v(" "),n("td",[t._v("以十进制的形式输出 float、double 类型的小数")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%e")]),t._v("、"),n("code",[t._v("%le")]),n("br"),n("code",[t._v("%E")]),t._v("、"),n("code",[t._v("%lE")])]),t._v(" "),n("td",[t._v("以指数的形式输出 float、double 类型的小数。如果 e 小写，那么输出结果中的 e 也小写；如果 E 大写，那么输出结果中的 E 也大写。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%g")]),t._v("、"),n("code",[t._v("%lg")]),n("br"),n("code",[t._v("%G")]),t._v("、"),n("code",[t._v("%lG")])]),t._v(" "),n("td",[t._v("以十进制和指数中较短的形式输出 float、double 类型的小数，并且小数部分的最后不会添加多余的 0。如果 g 小写，那么当以指数形式输出时 e 也小写；如果 G 大写，那么当以指数形式输出时 E 也大写。")])]),t._v(" "),n("tr",[n("td",[n("code",[t._v("%s")])]),t._v(" "),n("td",[t._v("输出一个字符串")])])])]),t._v(" "),n("h3",{attrs:{id:"格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式"}},[t._v("#")]),t._v(" 格式")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("%[flag][width][.precision]type\n")])])]),n("ol",[n("li",[t._v("type 表示输出类型，比如 %d、%f、%c、%lf，type 就分别对应 d、f、c、lf；再如，"),n("code",[t._v("%-9d")]),t._v("中 type 对应 d。")])]),t._v(" "),n("blockquote",[n("p",[t._v("type 这一项必须有，这意味着输出时必须要知道是什么类型。")])]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("width 表示最小输出宽度，也就是至少占用几个字符的位置；例如，"),n("code",[t._v("%-9d")]),t._v("中 width 对应 9，表示输出结果最少占用 9 个字符的宽度。")])]),t._v(" "),n("blockquote",[n("p",[t._v("当输出结果的宽度不足 width 时，以空格补齐（如果没有指定对齐方式，默认会在左边补齐空格）；当输出结果的宽度超过 width 时，width 不再起作用，按照数据本身的宽度来输出。")])]),t._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[t._v("precision 表示输出精度，也就是小数的位数。")])]),t._v(" "),n("ul",[n("li",[t._v("当小数部分的位数大于 precision 时，会按照四舍五入的原则丢掉多余的数字；")]),t._v(" "),n("li",[t._v("当小数部分的位数小于 precision 时，会在后面补 0。")])]),t._v(" "),n("p",[t._v("另外，.precision 也可以用于整数和字符串，但是功能却是相反的：")]),t._v(" "),n("ul",[n("li",[t._v("用于整数时，.precision 表示最小输出宽度。与 width 不同的是，整数的宽度不足时会在左边补 0，而不是补空格。")]),t._v(" "),n("li",[t._v("用于字符串时，.precision 表示最大输出宽度，或者说截取字符串。当字符串的长度大于 precision 时，会截掉多余的字符；当字符串的长度小于 precision 时，.precision 就不再起作用。如："),n("code",[t._v('printf("%5.1s", "12345");')]),t._v("，输出结果为："),n("code",[t._v("四个空格1")])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("flags（标识）")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("-")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("在给定的字段宽度内左对齐，默认是右对齐（参见 width 子说明符）。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("+")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("强制在结果之前显示加号或减号（+ 或 -），即正数前面会显示 + 号。默认情况下，只有负数前面会显示一个 - 号。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("空格")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("如果没有写入任何符号，则在该值前面插入一个空格。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("#")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("与 o、x 或 X 说明符一起使用时，非零值前面会分别显示 0、0x 或 0X。与 e、E 和 f 一起使用时，会强制输出包含一个小数点，即使后边没有数字时也会显示小数点。默认情况下，如果后边没有数字时候，不会显示显示小数点。与 g 或 G 一起使用时，结果与使用 e 或 E 时相同，但是尾部的零不会被移除。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("0")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("在指定填充 padding 的数字左边放置零（0），而不是空格（参见 width 子说明符）。")])])])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"center"}},[t._v("width（宽度）")]),t._v(" "),n("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("(number)")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("要输出的字符的最小数目。如果输出的值短于该数，结果会用空格填充。如果输出的值长于该数，结果不会被截断。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"center"}},[t._v("*")]),t._v(" "),n("td",{staticStyle:{"text-align":"center"}},[t._v("宽度在 format 字符串中未指定，但是会作为附加整数值参数放置于要被格式化的参数之前。")])])])]),t._v(" "),n("h3",{attrs:{id:"返回值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#返回值"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),n("p",[t._v("如果成功，则返回写入的字符总数，否则返回一个负数。")]),t._v(" "),n("h2",{attrs:{id:"scanf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#scanf"}},[t._v("#")]),t._v(" scanf")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"title"},[t._v("提示")]),n("p",[t._v("scanf 函数中不可以使用"),n("code",[t._v("#")]),t._v(","),n("code",[t._v("-")]),t._v(","),n("code",[t._v("m.n")]),t._v("的格式附加字符(m、n属于自然数),")]),t._v(" "),n("p",[t._v("可以使用域宽的格式附加字符")])]),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n     * 可以使用域宽\n     * scanf("%5d", &a); 输入 12345678\n     * printf("%d\\n", a); 输出 12345\n     */')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n     * 不可以使用负号\n     * scanf("%-5d", &a);\n     * printf("%d\\n", a); 输出的a是垃圾值\n     */')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/*\n     * double b;\n     * scanf("%7.2d", &b); \n     * printf("%d\\n", b); 输出的b是垃圾值\n     */')]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getchar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("putchar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ch"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("putchar")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h3",{attrs:{id:"返回值-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#返回值-2"}},[t._v("#")]),t._v(" 返回值")]),t._v(" "),n("p",[t._v("如果成功，该函数返回成功匹配和赋值的个数。如果到达文件末尾或发生读错误，则返回 EOF。")])])}),[],!1,null,null,null);s.default=e.exports}}]);