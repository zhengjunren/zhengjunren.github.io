(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{790:function(t,a,s){"use strict";s.r(a);var n=s(7),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"},[t._v("备注")]),s("p",[t._v("从"),s("a",{attrs:{href:"https://github.com/yangchong211/YCBlogs",target:"_blank",rel:"noopener noreferrer"}},[t._v("这"),s("OutboundLink")],1),t._v("转载！！！")])]),s("h2",{attrs:{id:"start和run区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#start和run区别"}},[t._v("#")]),t._v(" start和run区别")]),t._v(" "),s("ul",[s("li",[t._v("线程中"),s("code",[t._v("start")]),t._v("和"),s("code",[t._v("run")]),t._v("方法有什么区别？\n"),s("ul",[s("li",[t._v("为什么我们调用"),s("code",[t._v("start()")]),t._v("方法时会执行"),s("code",[t._v("run()")]),t._v("方法，为什么我们不能直接调用"),s("code",[t._v("run()")]),t._v("方法？这是一个非常经典的java多线程面试问题。当你调用start()方法时你将创建新的线程，并且执行在"),s("code",[t._v("run()")]),t._v("方法里的代码。但是如果你直接调用"),s("code",[t._v("run()")]),t._v("方法，它不会创建新的线程也不会执行调用线程的代码。")])])])]),t._v(" "),s("h2",{attrs:{id:"为何不能重复start"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为何不能重复start"}},[t._v("#")]),t._v(" 为何不能重复start")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如下所示，可以发现即使多次调用"),s("code",[t._v("start")]),t._v("方法，线程只会被执行一次。那么这个究竟是怎么做到的呢？")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadDemo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建对象")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动线程: 需要使用start方法启动线程, 如果我们在这里调用的是run方法,那么我们只是把该方法作为普通方法进行执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//\t\tt1.run() ;")]),t._v("\n\t\tt1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉jvm开启一个线程调用run方法")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// t1.start() ;\t\t// 一个线程只能被启动一次")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyThread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"小杨逗比"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("然后查看一下"),s("code",[t._v("start")]),t._v("方法的源码，如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" started "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Android-changed: throw if 'started' is true")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("threadStatus "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" started"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalThreadStateException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    group"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    started "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nativeCreate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" stackSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" daemon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        started "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("started"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                group"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("threadStartFailed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ignore"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* do nothing. If start0 threw a Throwable then\n              it will be passed up the call stack */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("一个线程多次start会出现什么情况？")]),t._v(" "),s("ul",[s("li",[t._v("会直接抛出异常")])])])]),t._v(" "),s("h2",{attrs:{id:"wait和sleep方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait和sleep方法"}},[t._v("#")]),t._v(" wait和sleep方法")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("wait")]),t._v("和"),s("code",[t._v("sleep")]),t._v("方法的区别\n"),s("ul",[s("li",[t._v("最大的不同是在等待时"),s("code",[t._v("wait")]),t._v("会释放锁，而"),s("code",[t._v("sleep")]),t._v("一直持有锁。"),s("code",[t._v("Wait")]),t._v("通常被用于线程间交互，"),s("code",[t._v("sleep")]),t._v("通常被用于暂停执行。")])])]),t._v(" "),s("li",[s("code",[t._v("wait()")]),t._v("和"),s("code",[t._v("sleep()")]),t._v("其他区别\n"),s("ul",[s("li",[s("code",[t._v("sleep")]),t._v("来自"),s("code",[t._v("Thread")]),t._v("类，和"),s("code",[t._v("wait")]),t._v("来自"),s("code",[t._v("Object")]),t._v("类")]),t._v(" "),s("li",[t._v("调用"),s("code",[t._v("sleep()")]),t._v("方法的过程中，线程不会释放对象锁。而 调用"),s("code",[t._v("wait")]),t._v("方法线程会释放对象锁")]),t._v(" "),s("li",[s("code",[t._v("sleep")]),t._v("睡眠后不出让系统资源，"),s("code",[t._v("wait")]),t._v("让出系统资源其他线程可以占用CPU")]),t._v(" "),s("li",[s("code",[t._v("sleep(milliseconds)")]),t._v("需要指定一个睡眠时间，时间一到会自动唤醒。")])])]),t._v(" "),s("li",[t._v("通俗解释\n"),s("ul",[s("li",[t._v("Java程序中"),s("code",[t._v("wait")]),t._v("和"),s("code",[t._v("sleep")]),t._v("都会造成某种形式的暂停，它们可以满足不同的需要。"),s("code",[t._v("wait()")]),t._v("方法用于线程间通信，如果等待条件为真且其它线程被唤醒时它会释放锁，而"),s("code",[t._v("sleep()")]),t._v("方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。")])])])]),t._v(" "),s("h2",{attrs:{id:"run方法的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run方法的作用"}},[t._v("#")]),t._v(" run方法的作用")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("为什么要重写"),s("code",[t._v("run")]),t._v("方法")]),t._v(" "),s("ul",[s("li",[t._v("可以在定义的类中,定义多个方法,而方法中的代码并不是所有的都需要线程来进行执行;如果我们想让某一个段代码被线程,那么我们只需要将那一段代码放在"),s("code",[t._v("run")]),t._v("方法中。那么也就是说"),s("code",[t._v("run")]),t._v("方法中封装的都是要被线程执行的代码 ;")])])]),t._v(" "),s("li",[s("code",[t._v("run")]),t._v("方法中的代码的特点:\n"),s("ul",[s("li",[t._v("封装的都是一些比较耗时的代码")])])])]),t._v(" "),s("h2",{attrs:{id:"runnable和callable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#runnable和callable"}},[t._v("#")]),t._v(" Runnable和Callable")]),t._v(" "),s("ul",[s("li",[t._v("Runnable和Callable区别\n"),s("ul",[s("li",[s("code",[t._v("Runnable")]),t._v("接口中的"),s("code",[t._v("run()")]),t._v("方法的返回值是"),s("code",[t._v("void")]),t._v("，它做的事情只是纯粹地去执行"),s("code",[t._v("run()")]),t._v("方法中的代码而已；"),s("code",[t._v("Callable")]),t._v("接口中的"),s("code",[t._v("call()")]),t._v("方法是有返回值的，是一个泛型，和"),s("code",[t._v("Future")]),t._v("、"),s("code",[t._v("FutureTask")]),t._v("配合可以用来获取异步执行的结果。")]),t._v(" "),s("li",[t._v("这其实是很有用的一个特性，因为多线程相比单线程更难、更复杂的一个重要原因就是因为多线程充满着未知性，某条线程是否执行了？某条线程执行了多久？某条线程执行的时候我们期望的数据是否已经赋值完毕？无法得知，我们能做的只是等待这条多线程的任务执行完毕而已。而"),s("code",[t._v("Callable+Future/FutureTask")]),t._v("却可以获取多线程运行的结果，可以在等待时间太长没获取到需要的数据的情况下取消该线程的任务，真的是非常有用。")])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);