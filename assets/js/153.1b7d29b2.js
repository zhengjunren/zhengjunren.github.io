(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{345:function(v,a,e){"use strict";e.r(a);var r=e(5),_=Object(r.a)({},(function(){var v=this,a=v.$createElement,e=v._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[v._v("#")]),v._v(" 异常")]),v._v(" "),e("h2",{attrs:{id:"java-异常类层次结构图"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-异常类层次结构图"}},[v._v("#")]),v._v(" Java 异常类层次结构图")]),v._v(" "),e("p",[e("img",{attrs:{src:"/java/Java%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE.png",alt:"简单的网络和由网络构成的互连网"}}),v._v(" "),e("img",{attrs:{src:"/java/Java%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E5%9B%BE2.png",alt:"简单的网络和由网络构成的互连网"}})]),v._v(" "),e("p",[v._v("在 Java 中，所有的异常都有一个共同的父类 "),e("code",[v._v("java.lang")]),v._v(" 包中的 "),e("code",[v._v("Throwable")]),v._v(" 类。"),e("code",[v._v("Throwable")]),v._v(" 类有两个重要的子类 "),e("code",[v._v("Exception")]),v._v("（异常）和 "),e("code",[v._v("Error")]),v._v("（错误）。"),e("code",[v._v("Exception")]),v._v(" 能被程序本身处理(try-catch)， "),e("code",[v._v("Error")]),v._v(" 是无法处理的(只能尽量避免)。")]),v._v(" "),e("p",[e("code",[v._v("Exception")]),v._v(" 和 "),e("code",[v._v("Error")]),v._v(" 二者都是 "),e("code",[v._v("Java")]),v._v(" 异常处理的重要子类，各自都包含大量子类。")]),v._v(" "),e("p",[e("code",[v._v("Exception")]),v._v(" :程序本身可以处理的异常，可以通过 "),e("code",[v._v("catch")]),v._v(" 来进行捕获。"),e("code",[v._v("Exception")]),v._v(" 又可以分为 受检查异常(必须处理) 和 不受检查异常(可以不处理)。\n"),e("code",[v._v("Error")]),v._v(" ："),e("code",[v._v("Error")]),v._v(" 属于程序无法处理的错误 ，我们没办法通过 "),e("code",[v._v("catch")]),v._v(" 来进行捕获 。例如，"),e("code",[v._v("Java")]),v._v(" 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误("),e("code",[v._v("OutOfMemoryError")]),v._v(")、类定义错误（"),e("code",[v._v("NoClassDefFoundError")]),v._v("）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")]),v._v(" "),e("h2",{attrs:{id:"throwable-类常用方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#throwable-类常用方法"}},[v._v("#")]),v._v(" Throwable 类常用方法")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("public string getMessage()")]),v._v(":返回异常发生时的简要描述")]),v._v(" "),e("li",[e("code",[v._v("public string toString()")]),v._v(":返回异常发生时的详细信息")]),v._v(" "),e("li",[e("code",[v._v("public string getLocalizedMessage()")]),v._v(":返回异常对象的本地化信息。使用 "),e("code",[v._v("Throwable")]),v._v(" 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 "),e("code",[v._v("getMessage()")]),v._v(" 返回的结果相同")]),v._v(" "),e("li",[e("code",[v._v("public void printStackTrace()")]),v._v(":在控制台上打印 Throwable 对象封装的异常信息")])])])}),[],!1,null,null,null);a.default=_.exports}}]);