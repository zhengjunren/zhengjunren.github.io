(window.webpackJsonp=window.webpackJsonp||[]).push([[194],{387:function(_,v,a){"use strict";a.r(v);var t=a(5),s=Object(t.a)({},(function(){var _=this,v=_.$createElement,a=_._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("h1",{attrs:{id:"软件与软件工程的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件与软件工程的概念"}},[_._v("#")]),_._v(" 软件与软件工程的概念")]),_._v(" "),a("h2",{attrs:{id:"软件的概念、特性和分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件的概念、特性和分类"}},[_._v("#")]),_._v(" 软件的概念、特性和分类")]),_._v(" "),a("h3",{attrs:{id:"软件的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件的概念"}},[_._v("#")]),_._v(" 软件的概念")]),_._v(" "),a("p",[_._v("软件是计算机系统中与硬件相互依存的另一部分，包括程序、数据、及其相关文档的完整集合。其中，程序是按实现设计的功能和性能要求执行的指令序列；数据是使程序能够正确地处理信息的数据结构；文档是与程序开发、维护和使用有关的图文材料。")]),_._v(" "),a("h3",{attrs:{id:"软件的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件的特性"}},[_._v("#")]),_._v(" 软件的特性")]),_._v(" "),a("ol",[a("li",[_._v("形态特性")]),_._v(" "),a("li",[_._v("智能特性")]),_._v(" "),a("li",[_._v("开发特性")]),_._v(" "),a("li",[_._v("质量特性")]),_._v(" "),a("li",[_._v("生产特性")]),_._v(" "),a("li",[_._v("管理特性")]),_._v(" "),a("li",[_._v("环境特性")]),_._v(" "),a("li",[_._v("维护特性")]),_._v(" "),a("li",[_._v("废弃特性")]),_._v(" "),a("li",[_._v("应用特性")])]),_._v(" "),a("h3",{attrs:{id:"软件的分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件的分类"}},[_._v("#")]),_._v(" 软件的分类")]),_._v(" "),a("ol",[a("li",[_._v("系统软件\n"),a("ul",[a("li",[_._v("如操作系统、数据库管理系统、设备驱动程序以及通信和网络处理程序等")])])]),_._v(" "),a("li",[_._v("应用程序\n"),a("ul",[a("li",[_._v("ERP 软件、系统仿真、 CAD、事务管理、办公自动化等方面的软件")])])]),_._v(" "),a("li",[_._v("支撑软件（工具软件）\n"),a("ul",[a("li",[_._v("分为纵向支撑软件和横向支撑软件，如需求分析工具、设计工具、项目管理工具、配置管理工具")])])]),_._v(" "),a("li",[_._v("可复用软件\n"),a("ul",[a("li",[_._v("各种标准函数库")])])])]),_._v(" "),a("h2",{attrs:{id:"软件危机与软件工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件危机与软件工程"}},[_._v("#")]),_._v(" 软件危机与软件工程")]),_._v(" "),a("h3",{attrs:{id:"软件危机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件危机"}},[_._v("#")]),_._v(" 软件危机")]),_._v(" "),a("p",[_._v("20 世纪 60 年代，计算机已经应用在很多行业，解决问题的闺蜜及难度逐渐增加，由于软件本身的特点及软件开发方法等多方面的问题，软件的发展速度远远滞后于硬件的发展，不能满足社会化日益增长软件需要。软件开发周期长、成本高、质量差、维护困难，导致软件危机的爆发。")]),_._v(" "),a("p",[_._v("除了软件本身的特点，软件危机发生的原因主要有以下几个方面：")]),_._v(" "),a("ol",[a("li",[_._v("缺乏软件开发的经验和有关软件开发数据的积累，使得开发工作的计划很难制定。")]),_._v(" "),a("li",[_._v("软件人员与用户的交流存在障碍。")]),_._v(" "),a("li",[_._v("软件开发过程不规范，缺少方法论和规范的指导，开发人员各自为战，缺少整体的规划和配合，不重视文字资料工作，软件难以维护。")]),_._v(" "),a("li",[_._v("随着软件规模的扩大，其复杂性往往会呈指数级升高。")]),_._v(" "),a("li",[_._v("缺少有效的软件测评手段，提交用户的软件质量差，在运行中暴露出大量问题。")])]),_._v(" "),a("h3",{attrs:{id:"软件工程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件工程"}},[_._v("#")]),_._v(" 软件工程")]),_._v(" "),a("p",[_._v("概括地说，软件工程是知道软件开发和维护的工程性学科，它以计算机科学理论和其他相关学科的理论为指导，采用工程化的概念、原理、技术和方法进行软件的开发和维护，把经过时间考验且证明是正确的管理技术和当前能够得到的最好的技术方法结合起来，比较少的代价获得高质量的软件并维护它。")]),_._v(" "),a("h2",{attrs:{id:"软件工程的目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件工程的目标"}},[_._v("#")]),_._v(" 软件工程的目标")]),_._v(" "),a("p",[_._v("软件工程的目标是运用先进 的软件开发技术和管理方法来提高软件的质量和生产率，也就是要以较短的周期、较低的成本生产出高质量的软件产品，并最终实现软件的工业化生产。")]),_._v(" "),a("h2",{attrs:{id:"软件生存期"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件生存期"}},[_._v("#")]),_._v(" 软件生存期")]),_._v(" "),a("p",[_._v("软件生存期由"),a("strong",[_._v("软件定义、软件开发和运行维护")]),_._v("三个时期组成。每个时期又可划分为若干个阶段。")]),_._v(" "),a("ol",[a("li",[_._v("软件定义时期的主要任务是解决“做什么”的问题。分为三个阶段：问题定义、可行性研究和需求分析。")]),_._v(" "),a("li",[_._v("软件开发时期的主要任务是解决“如何做”的问题。分为四个阶段：概要设计、详细设计、编码和测试。")]),_._v(" "),a("li",[_._v("运行维护时期的主要任务是使软件持久地满足用户的需要。分为四类维护活动：改正性维护、适应性维护、完整性维护、预防性维护。")])]),_._v(" "),a("h2",{attrs:{id:"软件工程方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#软件工程方法"}},[_._v("#")]),_._v(" 软件工程方法")]),_._v(" "),a("p",[_._v("软件工程方法学包括是哪个要素：方法、工具和过程。")]),_._v(" "),a("p",[_._v("软件工程方法为建造软件提供技术上的解决方法（“如何做”），方法覆盖面很广，包括沟通、需求分析、设计建模、编程、测试和支持。目前使用最广泛的方法是结构化方法和面向对象方法。")]),_._v(" "),a("p",[_._v("工具为方法的运行提供自动或半自动的软件支撑环境。")]),_._v(" "),a("p",[_._v("过程是获得高质量的软件所需要完成完成的一系列任务的框架，它规定了完成各项任务的工作步骤。")]),_._v(" "),a("h3",{attrs:{id:"传统方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统方法"}},[_._v("#")]),_._v(" 传统方法")]),_._v(" "),a("p",[_._v("传统方法也称为生命周期方法或结构化泛型。它采用结构化技术来完成软件开发的各项任务，这种方法学把软件生命周期的全过程依次划分为若干个阶段，然后顺序的逐步完成每个阶段的任务。")]),_._v(" "),a("p",[_._v("特点：")]),_._v(" "),a("ol",[a("li",[_._v("强调自顶向下地完成软件开发的各个阶段任务。")]),_._v(" "),a("li",[_._v("结构化方法要么面向行为，要么面向数据，缺乏使两者有机结合的机制。")])]),_._v(" "),a("h3",{attrs:{id:"面向对象方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#面向对象方法"}},[_._v("#")]),_._v(" 面向对象方法")]),_._v(" "),a("ul",[a("li",[_._v("是将数据和对数据的操作紧密地结合起来的方法。")]),_._v(" "),a("li",[_._v("软件开发过程是多次反复迭代的演化过程")]),_._v(" "),a("li",[_._v("面向对象方法在概念和表示方法上的一致性，保证了各项开发活动之间的平滑过度")]),_._v(" "),a("li",[_._v("对于大型、复杂及交互性比较强的系统，使用面向对象方法学更有优势。")])]),_._v(" "),a("h3",{attrs:{id:"形式法方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#形式法方法"}},[_._v("#")]),_._v(" 形式法方法")]),_._v(" "),a("p",[_._v("一种基于形式化数学变换的软件方法，它可将系统的规格说明转换为可执行的程序。")]),_._v(" "),a("p",[a("img",{attrs:{src:"/soft_engineering/image-20210304093646803.png",alt:"image-20210304093646803"}})]),_._v(" "),a("p",[_._v("主要特点：")]),_._v(" "),a("ol",[a("li",[_._v("软件需求规格说明别细化为用数学记号表达的纤细的形式化规格说明。")]),_._v(" "),a("li",[_._v("设计、实现和单元测试等开发过程由一个变换开发过程代替，通过一系列变换将形式的规格说明细化的程序。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);