(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{535:function(t,s,a){"use strict";a.r(s);var n=a(7),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[t._v("#")]),t._v(" 数组")]),t._v(" "),a("h3",{attrs:{id:"数组定义和引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组定义和引用"}},[t._v("#")]),t._v(" "),a("strong",[t._v("数组定义和引用")])]),t._v(" "),a("ol",[a("li",[t._v("一维数组的定义方式如下：")])]),t._v(" "),a("blockquote",[a("p",[t._v("类型说明符 数组名[下标]："),a("br"),t._v("\n下标可以为："),a("br"),t._v("\n1、C89/C90标准：定义数组时下标只允许使用整型、字符型常量，引用数组时下标可以使用整型、字符型的常量或者变量"),a("br"),t._v("\n2、C99标准：定义数组时下标可以使用整型、字符型的常量或变量，但变量必须已经赋值；引用数组时下标可以使用整型、字符型的常量或者变量。以上所说的常量及变量均包含表达式。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("数组元素的表示形式为：")])]),t._v(" "),a("blockquote",[a("p",[t._v("数组名[下标];下标可以是整型常量、整型表达式、整型变量、常量表达式")])]),t._v(" "),a("ul",[a("li",[t._v("当程序执行中，数组元素下标超出所定义下标范围时，系统将"),a("strong",[t._v("不会")]),t._v("给出“下标越界的出错信息”")])]),t._v(" "),a("h3",{attrs:{id:"二维数组元素引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二维数组元素引用"}},[t._v("#")]),t._v(" 二维数组元素引用")]),t._v(" "),a("p",[a("code",[t._v("(*(a+i))[j]")]),t._v("与"),a("code",[t._v("*(a+i)[j]")]),a("br"),t._v("\n第一个表达式就是a[i][j]，不解释"),a("br"),t._v("\n第二个表达式由于"),a("code",[t._v("[]")]),t._v("优先级高，解释为"),a("code",[t._v("*((a+i)[j])")]),t._v("，编译器解析为"),a("code",[t._v("*(*(a+i+j)+0)")]),t._v("，即"),a("code",[t._v("a[i+j][0]")])]),t._v(" "),a("h3",{attrs:{id:"字符数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符数组"}},[t._v("#")]),t._v(" 字符数组")]),t._v(" "),a("p",[t._v("字符数组初始化可以为空字符串，字符变量不可以为空字符。")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// char a = '';   报错")]),t._v("\n")])])]),a("p",[t._v("下面代码中，s数组长度为 6、字符串长度为5；p数组长度为7，字符串长度为6")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<stdio.h>")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<string.h>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\ta\\017bc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '\\017'是一个字符")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\ta\\018bc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\018是两个字符 '\\01' '8'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d %d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("strlen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出 5 6")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("printf")]),a("strong",[t._v("函数的输出控制符比输出参数少时，按照参数顺序输出，如果控制符比参数多，则输出不确定的值")])]),t._v(" "),a("li",[a("strong",[t._v("如果不指定函数类型，系统会隐含指定函数类型为int")])]),t._v(" "),a("li",[a("strong",[t._v("如果函数funA调用了函数funB，函数funB又调用了函数funA，则成为函数的间接递归调用")])]),t._v(" "),a("li",[a("strong",[t._v("scanf()&gets()")]),t._v(" "),a("ul",[a("li",[t._v('gets 可以接受空格；而 scanf 遇到空格、回车和 tab 键会认为输入结束，所以它不能接受空格如果输入为"hello world"时，读取"hello world"。而如果用scanf则只能读取hello')]),t._v(" "),a("li",[t._v("scanf 对末尾回车符的处理：把回车符保留在缓存中；gets 对末尾回车符的处理：接受回车，但把回车替换为 \\0")]),t._v(" "),a("li",[t._v("gets 的返回值为 char * 型，当读入成功是会返回输入字符串的指针地址，出错是返回 NULL；scanf 返回值为int型，返回实际成功赋值的变量个数，当遇到文件结束符时返回 EOF")]),t._v(" "),a("li",[t._v("scanf ：当遇到回车，空格和tab键会自动在字符串后面添加’\\0’，但是回车，空格和tab键仍会留在输入的缓冲区中。")])])])]),t._v(" "),a("h3",{attrs:{id:"宏和函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏和函数的区别"}},[t._v("#")]),t._v(" 宏和函数的区别")]),t._v(" "),a("p",[t._v("函数和宏函数的区别就在于，"),a("strong",[t._v("宏函数占用了大量的空间，而函数占用了时间")]),t._v("。大家要知道的是，函数调用是要使用系统的栈来保存数据的，如果编译器里有栈检查选项，一般在函数的头会嵌入一些汇编语句对当前栈进行检查；同时，CPU也要在函数调用时保存和恢复当前的现场，进行压栈和弹栈操作，所以，"),a("strong",[t._v("函数调用需要一 些CPU时间")]),t._v("。而宏函数不存在这个问题。"),a("strong",[t._v("宏函数仅仅作为预先写好的代码嵌入到当前程序，不会产生函数调用，所以仅仅是占用了空间")]),t._v("，在频繁调用同一个宏函数的时候，该现象尤其突出。")]),t._v(" "),a("h2",{attrs:{id:"指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针"}},[t._v("#")]),t._v(" 指针")]),t._v(" "),a("h3",{attrs:{id:"对于基类型相同的指针变量可以进行运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对于基类型相同的指针变量可以进行运算"}},[t._v("#")]),t._v(" 对于基类型相同的指针变量可以进行运算")]),t._v(" "),a("p",[t._v("("),a("RouterLink",{attrs:{to:"/c/case/#指针运算"}},[a("strong",[t._v("示例代码")])]),t._v(")")],1),t._v(" "),a("ul",[a("li",[a("code",[t._v(">")]),t._v("和"),a("code",[t._v("<")]),t._v("：运算在两个同类型的指针间可以比较大小，比较原则应该是按照实际内存的高低位比较的")]),t._v(" "),a("li",[a("code",[t._v("=")]),t._v("：赋值")]),t._v(" "),a("li",[a("code",[t._v("-")]),t._v("：运算两个相同指针变量相减可以获得在之间相隔的同类型元素个数（在某个类型的数组中的应用）。")]),t._v(" "),a("li",[a("strong",[a("code",[t._v("+")]),t._v("：运算是不可以的，因为两个指针相加什么都得不到，所以规定不允许相加。")])])]),t._v(" "),a("h3",{attrs:{id:"指针数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指针数组"}},[t._v("#")]),t._v(" "),a("strong",[t._v("指针数组")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("一个数组，若其元素均为指针类型数据，称为指针数组。")]),t._v(" "),a("li",[t._v("定义指针数组的一般形式：类型名 * 数组名[数组长度]；")]),t._v(" "),a("li",[t._v("如:"),a("code",[t._v("int *p[4];")]),t._v("  由于"),a("code",[t._v("[ ]")]),t._v("比"),a("code",[t._v("*")]),t._v("优先级高，因此"),a("code",[t._v("p")]),t._v("先于"),a("code",[t._v("[4]")]),t._v("结合，形成"),a("code",[t._v("p[4]")]),t._v(",这显然是数组的形式，表示"),a("code",[t._v("p")]),t._v("数组有4个元素。然后"),a("code",[t._v("p[4]")]),t._v("再和"),a("code",[t._v("*")]),t._v("结合，表示此数组的每个元素都可指向一个整型变量。")])]),t._v(" "),a("h3",{attrs:{id:"给指针变量赋空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给指针变量赋空值"}},[t._v("#")]),t._v(" 给指针变量赋空值：")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\np "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("#include")]),t._v("命令行所包含的文件"),a("strong",[t._v("只能是纯文本文件")]),t._v("：\n"),a("ul",[a("li",[t._v("目标文件是编译器链接之后生成的文件，不能用#include")]),t._v(" "),a("li",[t._v("可执行文件是编译器编译之后生成的文件，不能用#include")]),t._v(" "),a("li",[t._v("二进制文件是编译器翻译代码用于编译的文件，不能用#include")])])]),t._v(" "),a("li",[a("code",[t._v("if-else")]),t._v("的配对是就近原则")]),t._v(" "),a("li",[t._v("可以把一个数组名作为一个同名指针来使用，或者把顺序的指针作为同名的数组名来使用。")])])])}),[],!1,null,null,null);s.default=r.exports}}]);