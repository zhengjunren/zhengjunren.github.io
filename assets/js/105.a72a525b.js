(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{542:function(v,_,t){"use strict";t.r(_);var a=t(29),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"重载和重写的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写的区别"}},[v._v("#")]),v._v(" 重载和重写的区别")]),v._v(" "),t("h2",{attrs:{id:"重载-overload"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载-overload"}},[v._v("#")]),v._v(" 重载(Overload)")]),v._v(" "),t("p",[v._v("重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。")]),v._v(" "),t("p",[v._v("每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。")]),v._v(" "),t("p",[v._v("最常用的地方就是构造器的重载。")]),v._v(" "),t("h3",{attrs:{id:"重载规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载规则"}},[v._v("#")]),v._v(" 重载规则")]),v._v(" "),t("ul",[t("li",[v._v("被重载的方法必须改变参数列表(参数个数或类型不一样)；")]),v._v(" "),t("li",[v._v("被重载的方法可以改变返回类型；")]),v._v(" "),t("li",[v._v("被重载的方法可以改变访问修饰符；")]),v._v(" "),t("li",[v._v("被重载的方法可以声明新的或更广的检查异常；")]),v._v(" "),t("li",[v._v("方法能够在同一个类中或者在一个子类中被重载。")]),v._v(" "),t("li",[v._v("无法以返回值类型作为重载函数的区分标准。")])]),v._v(" "),t("h2",{attrs:{id:"重写-override"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写-override"}},[v._v("#")]),v._v(" 重写(Override)")]),v._v(" "),t("p",[v._v("重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！")]),v._v(" "),t("p",[v._v("重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。")]),v._v(" "),t("p",[v._v("重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。例如： 父类的一个方法申明了一个检查异常 IOException，但是在重写这个方法的时候不能抛出 Exception 异常，因为 Exception 是 IOException 的父类，只能抛出 IOException 的子类异常。")]),v._v(" "),t("h3",{attrs:{id:"方法的重写规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法的重写规则"}},[v._v("#")]),v._v(" 方法的重写规则")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("参数列表必须完全与被重写方法的相同。")])]),v._v(" "),t("li",[t("p",[v._v("返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。")])]),v._v(" "),t("li",[t("p",[v._v("访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。")])]),v._v(" "),t("li",[t("p",[v._v("父类的成员方法只能被它的子类重写。")])]),v._v(" "),t("li",[t("p",[v._v("声明为 final 的方法不能被重写。")])]),v._v(" "),t("li",[t("p",[v._v("声明为 static 的方法不能被重写，但是能够被再次声明。")])]),v._v(" "),t("li",[t("p",[v._v("子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。")])]),v._v(" "),t("li",[t("p",[v._v("子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。")])]),v._v(" "),t("li",[t("p",[v._v("重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。")])]),v._v(" "),t("li",[t("p",[v._v("构造方法不能被重写。")])]),v._v(" "),t("li",[t("p",[v._v("如果不能继承一个方法，则不能重写这个方法。")])])]),v._v(" "),t("h2",{attrs:{id:"区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[v._v("#")]),v._v(" 区别")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("区别点")]),v._v(" "),t("th",[v._v("重载方法")]),v._v(" "),t("th",[v._v("重写方法")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[v._v("参数列表")]),v._v(" "),t("td",[v._v("必须修改")]),v._v(" "),t("td",[v._v("一定不能修改")])]),v._v(" "),t("tr",[t("td",[v._v("返回类型")]),v._v(" "),t("td",[v._v("可以修改")]),v._v(" "),t("td",[v._v("一定不能修改")])]),v._v(" "),t("tr",[t("td",[v._v("异常")]),v._v(" "),t("td",[v._v("可以修改")]),v._v(" "),t("td",[v._v("可以减少或删除，一定不能抛出新的或者更广的异常")])]),v._v(" "),t("tr",[t("td",[v._v("访问")]),v._v(" "),t("td",[v._v("可以修改")]),v._v(" "),t("td",[v._v("一定不能做更严格的限制（可以降低限制）")])])])])])}),[],!1,null,null,null);_.default=r.exports}}]);